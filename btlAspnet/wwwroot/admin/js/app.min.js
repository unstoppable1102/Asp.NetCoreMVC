/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/picocolors/picocolors.browser.js":
/*!*******************************************************!*\
  !*** ./node_modules/picocolors/picocolors.browser.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("var x=String;\nvar create=function() {return {isColorSupported:false,reset:x,bold:x,dim:x,italic:x,underline:x,inverse:x,hidden:x,strikethrough:x,black:x,red:x,green:x,yellow:x,blue:x,magenta:x,cyan:x,white:x,gray:x,bgBlack:x,bgRed:x,bgGreen:x,bgYellow:x,bgBlue:x,bgMagenta:x,bgCyan:x,bgWhite:x}};\nmodule.exports=create();\nmodule.exports.createColors = create;\n\n\n//# sourceURL=webpack://elstar/./node_modules/picocolors/picocolors.browser.js?");

/***/ }),

/***/ "./node_modules/tailwindcss/colors.js":
/*!********************************************!*\
  !*** ./node_modules/tailwindcss/colors.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("let colors = __webpack_require__(/*! ./lib/public/colors */ \"./node_modules/tailwindcss/lib/public/colors.js\")\nmodule.exports = (colors.__esModule ? colors : { default: colors }).default\n\n\n//# sourceURL=webpack://elstar/./node_modules/tailwindcss/colors.js?");

/***/ }),

/***/ "./node_modules/tailwindcss/lib/public/colors.js":
/*!*******************************************************!*\
  !*** ./node_modules/tailwindcss/lib/public/colors.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: ()=>_default\n}));\nconst _log = /*#__PURE__*/ _interopRequireDefault(__webpack_require__(/*! ../util/log */ \"./node_modules/tailwindcss/lib/util/log.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction warn({ version , from , to  }) {\n    _log.default.warn(`${from}-color-renamed`, [\n        `As of Tailwind CSS ${version}, \\`${from}\\` has been renamed to \\`${to}\\`.`,\n        \"Update your configuration file to silence this warning.\"\n    ]);\n}\nconst _default = {\n    inherit: \"inherit\",\n    current: \"currentColor\",\n    transparent: \"transparent\",\n    black: \"#000\",\n    white: \"#fff\",\n    slate: {\n        50: \"#f8fafc\",\n        100: \"#f1f5f9\",\n        200: \"#e2e8f0\",\n        300: \"#cbd5e1\",\n        400: \"#94a3b8\",\n        500: \"#64748b\",\n        600: \"#475569\",\n        700: \"#334155\",\n        800: \"#1e293b\",\n        900: \"#0f172a\",\n        950: \"#020617\"\n    },\n    gray: {\n        50: \"#f9fafb\",\n        100: \"#f3f4f6\",\n        200: \"#e5e7eb\",\n        300: \"#d1d5db\",\n        400: \"#9ca3af\",\n        500: \"#6b7280\",\n        600: \"#4b5563\",\n        700: \"#374151\",\n        800: \"#1f2937\",\n        900: \"#111827\",\n        950: \"#030712\"\n    },\n    zinc: {\n        50: \"#fafafa\",\n        100: \"#f4f4f5\",\n        200: \"#e4e4e7\",\n        300: \"#d4d4d8\",\n        400: \"#a1a1aa\",\n        500: \"#71717a\",\n        600: \"#52525b\",\n        700: \"#3f3f46\",\n        800: \"#27272a\",\n        900: \"#18181b\",\n        950: \"#09090b\"\n    },\n    neutral: {\n        50: \"#fafafa\",\n        100: \"#f5f5f5\",\n        200: \"#e5e5e5\",\n        300: \"#d4d4d4\",\n        400: \"#a3a3a3\",\n        500: \"#737373\",\n        600: \"#525252\",\n        700: \"#404040\",\n        800: \"#262626\",\n        900: \"#171717\",\n        950: \"#0a0a0a\"\n    },\n    stone: {\n        50: \"#fafaf9\",\n        100: \"#f5f5f4\",\n        200: \"#e7e5e4\",\n        300: \"#d6d3d1\",\n        400: \"#a8a29e\",\n        500: \"#78716c\",\n        600: \"#57534e\",\n        700: \"#44403c\",\n        800: \"#292524\",\n        900: \"#1c1917\",\n        950: \"#0c0a09\"\n    },\n    red: {\n        50: \"#fef2f2\",\n        100: \"#fee2e2\",\n        200: \"#fecaca\",\n        300: \"#fca5a5\",\n        400: \"#f87171\",\n        500: \"#ef4444\",\n        600: \"#dc2626\",\n        700: \"#b91c1c\",\n        800: \"#991b1b\",\n        900: \"#7f1d1d\",\n        950: \"#450a0a\"\n    },\n    orange: {\n        50: \"#fff7ed\",\n        100: \"#ffedd5\",\n        200: \"#fed7aa\",\n        300: \"#fdba74\",\n        400: \"#fb923c\",\n        500: \"#f97316\",\n        600: \"#ea580c\",\n        700: \"#c2410c\",\n        800: \"#9a3412\",\n        900: \"#7c2d12\",\n        950: \"#431407\"\n    },\n    amber: {\n        50: \"#fffbeb\",\n        100: \"#fef3c7\",\n        200: \"#fde68a\",\n        300: \"#fcd34d\",\n        400: \"#fbbf24\",\n        500: \"#f59e0b\",\n        600: \"#d97706\",\n        700: \"#b45309\",\n        800: \"#92400e\",\n        900: \"#78350f\",\n        950: \"#451a03\"\n    },\n    yellow: {\n        50: \"#fefce8\",\n        100: \"#fef9c3\",\n        200: \"#fef08a\",\n        300: \"#fde047\",\n        400: \"#facc15\",\n        500: \"#eab308\",\n        600: \"#ca8a04\",\n        700: \"#a16207\",\n        800: \"#854d0e\",\n        900: \"#713f12\",\n        950: \"#422006\"\n    },\n    lime: {\n        50: \"#f7fee7\",\n        100: \"#ecfccb\",\n        200: \"#d9f99d\",\n        300: \"#bef264\",\n        400: \"#a3e635\",\n        500: \"#84cc16\",\n        600: \"#65a30d\",\n        700: \"#4d7c0f\",\n        800: \"#3f6212\",\n        900: \"#365314\",\n        950: \"#1a2e05\"\n    },\n    green: {\n        50: \"#f0fdf4\",\n        100: \"#dcfce7\",\n        200: \"#bbf7d0\",\n        300: \"#86efac\",\n        400: \"#4ade80\",\n        500: \"#22c55e\",\n        600: \"#16a34a\",\n        700: \"#15803d\",\n        800: \"#166534\",\n        900: \"#14532d\",\n        950: \"#052e16\"\n    },\n    emerald: {\n        50: \"#ecfdf5\",\n        100: \"#d1fae5\",\n        200: \"#a7f3d0\",\n        300: \"#6ee7b7\",\n        400: \"#34d399\",\n        500: \"#10b981\",\n        600: \"#059669\",\n        700: \"#047857\",\n        800: \"#065f46\",\n        900: \"#064e3b\",\n        950: \"#022c22\"\n    },\n    teal: {\n        50: \"#f0fdfa\",\n        100: \"#ccfbf1\",\n        200: \"#99f6e4\",\n        300: \"#5eead4\",\n        400: \"#2dd4bf\",\n        500: \"#14b8a6\",\n        600: \"#0d9488\",\n        700: \"#0f766e\",\n        800: \"#115e59\",\n        900: \"#134e4a\",\n        950: \"#042f2e\"\n    },\n    cyan: {\n        50: \"#ecfeff\",\n        100: \"#cffafe\",\n        200: \"#a5f3fc\",\n        300: \"#67e8f9\",\n        400: \"#22d3ee\",\n        500: \"#06b6d4\",\n        600: \"#0891b2\",\n        700: \"#0e7490\",\n        800: \"#155e75\",\n        900: \"#164e63\",\n        950: \"#083344\"\n    },\n    sky: {\n        50: \"#f0f9ff\",\n        100: \"#e0f2fe\",\n        200: \"#bae6fd\",\n        300: \"#7dd3fc\",\n        400: \"#38bdf8\",\n        500: \"#0ea5e9\",\n        600: \"#0284c7\",\n        700: \"#0369a1\",\n        800: \"#075985\",\n        900: \"#0c4a6e\",\n        950: \"#082f49\"\n    },\n    blue: {\n        50: \"#eff6ff\",\n        100: \"#dbeafe\",\n        200: \"#bfdbfe\",\n        300: \"#93c5fd\",\n        400: \"#60a5fa\",\n        500: \"#3b82f6\",\n        600: \"#2563eb\",\n        700: \"#1d4ed8\",\n        800: \"#1e40af\",\n        900: \"#1e3a8a\",\n        950: \"#172554\"\n    },\n    indigo: {\n        50: \"#eef2ff\",\n        100: \"#e0e7ff\",\n        200: \"#c7d2fe\",\n        300: \"#a5b4fc\",\n        400: \"#818cf8\",\n        500: \"#6366f1\",\n        600: \"#4f46e5\",\n        700: \"#4338ca\",\n        800: \"#3730a3\",\n        900: \"#312e81\",\n        950: \"#1e1b4b\"\n    },\n    violet: {\n        50: \"#f5f3ff\",\n        100: \"#ede9fe\",\n        200: \"#ddd6fe\",\n        300: \"#c4b5fd\",\n        400: \"#a78bfa\",\n        500: \"#8b5cf6\",\n        600: \"#7c3aed\",\n        700: \"#6d28d9\",\n        800: \"#5b21b6\",\n        900: \"#4c1d95\",\n        950: \"#2e1065\"\n    },\n    purple: {\n        50: \"#faf5ff\",\n        100: \"#f3e8ff\",\n        200: \"#e9d5ff\",\n        300: \"#d8b4fe\",\n        400: \"#c084fc\",\n        500: \"#a855f7\",\n        600: \"#9333ea\",\n        700: \"#7e22ce\",\n        800: \"#6b21a8\",\n        900: \"#581c87\",\n        950: \"#3b0764\"\n    },\n    fuchsia: {\n        50: \"#fdf4ff\",\n        100: \"#fae8ff\",\n        200: \"#f5d0fe\",\n        300: \"#f0abfc\",\n        400: \"#e879f9\",\n        500: \"#d946ef\",\n        600: \"#c026d3\",\n        700: \"#a21caf\",\n        800: \"#86198f\",\n        900: \"#701a75\",\n        950: \"#4a044e\"\n    },\n    pink: {\n        50: \"#fdf2f8\",\n        100: \"#fce7f3\",\n        200: \"#fbcfe8\",\n        300: \"#f9a8d4\",\n        400: \"#f472b6\",\n        500: \"#ec4899\",\n        600: \"#db2777\",\n        700: \"#be185d\",\n        800: \"#9d174d\",\n        900: \"#831843\",\n        950: \"#500724\"\n    },\n    rose: {\n        50: \"#fff1f2\",\n        100: \"#ffe4e6\",\n        200: \"#fecdd3\",\n        300: \"#fda4af\",\n        400: \"#fb7185\",\n        500: \"#f43f5e\",\n        600: \"#e11d48\",\n        700: \"#be123c\",\n        800: \"#9f1239\",\n        900: \"#881337\",\n        950: \"#4c0519\"\n    },\n    get lightBlue () {\n        warn({\n            version: \"v2.2\",\n            from: \"lightBlue\",\n            to: \"sky\"\n        });\n        return this.sky;\n    },\n    get warmGray () {\n        warn({\n            version: \"v3.0\",\n            from: \"warmGray\",\n            to: \"stone\"\n        });\n        return this.stone;\n    },\n    get trueGray () {\n        warn({\n            version: \"v3.0\",\n            from: \"trueGray\",\n            to: \"neutral\"\n        });\n        return this.neutral;\n    },\n    get coolGray () {\n        warn({\n            version: \"v3.0\",\n            from: \"coolGray\",\n            to: \"gray\"\n        });\n        return this.gray;\n    },\n    get blueGray () {\n        warn({\n            version: \"v3.0\",\n            from: \"blueGray\",\n            to: \"slate\"\n        });\n        return this.slate;\n    }\n};\n\n\n//# sourceURL=webpack://elstar/./node_modules/tailwindcss/lib/public/colors.js?");

/***/ }),

/***/ "./node_modules/tailwindcss/lib/util/log.js":
/*!**************************************************!*\
  !*** ./node_modules/tailwindcss/lib/util/log.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    dim: ()=>dim,\n    default: ()=>_default\n});\nconst _picocolors = /*#__PURE__*/ _interopRequireDefault(__webpack_require__(/*! picocolors */ \"./node_modules/picocolors/picocolors.browser.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nlet alreadyShown = new Set();\nfunction log(type, messages, key) {\n    if (typeof process !== \"undefined\" && process.env.JEST_WORKER_ID) return;\n    if (key && alreadyShown.has(key)) return;\n    if (key) alreadyShown.add(key);\n    console.warn(\"\");\n    messages.forEach((message)=>console.warn(type, \"-\", message));\n}\nfunction dim(input) {\n    return _picocolors.default.dim(input);\n}\nconst _default = {\n    info (key, messages) {\n        log(_picocolors.default.bold(_picocolors.default.cyan(\"info\")), ...Array.isArray(key) ? [\n            key\n        ] : [\n            messages,\n            key\n        ]);\n    },\n    warn (key, messages) {\n        log(_picocolors.default.bold(_picocolors.default.yellow(\"warn\")), ...Array.isArray(key) ? [\n            key\n        ] : [\n            messages,\n            key\n        ]);\n    },\n    risk (key, messages) {\n        log(_picocolors.default.bold(_picocolors.default.magenta(\"risk\")), ...Array.isArray(key) ? [\n            key\n        ] : [\n            messages,\n            key\n        ]);\n    }\n};\n\n\n//# sourceURL=webpack://elstar/./node_modules/tailwindcss/lib/util/log.js?");

/***/ }),

/***/ "./src/es/app.js":
/*!***********************!*\
  !*** ./src/es/app.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Elstar)\n/* harmony export */ });\n/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core */ \"./src/es/core/index.js\");\n/* harmony import */ var _theme_configurator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./theme-configurator */ \"./src/es/theme-configurator/index.js\");\n/* harmony import */ var _docs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./docs */ \"./src/es/docs/index.js\");\n\r\n\r\n\r\n\r\nclass Elstar extends _core__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n\r\n    constructor () {\r\n        super()\r\n        this.initThemeConfig()\r\n        this.initDoc()\r\n    }\r\n\r\n    initThemeConfig() {\r\n        _theme_configurator__WEBPACK_IMPORTED_MODULE_1__[\"default\"].themeConfigurator()\r\n    }\r\n\r\n    initDoc() {\r\n        _docs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].docInit()\r\n    }\r\n}\r\n\r\n$(() => {\r\n   window.Elstar = new Elstar();\r\n});\r\n\n\n//# sourceURL=webpack://elstar/./src/es/app.js?");

/***/ }),

/***/ "./src/es/constant/theme-constant.js":
/*!*******************************************!*\
  !*** ./src/es/constant/theme-constant.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   themeColors: () => (/* binding */ themeColors)\n/* harmony export */ });\n/* harmony import */ var tailwindcss_colors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tailwindcss/colors */ \"./node_modules/tailwindcss/colors.js\");\n/* harmony import */ var tailwindcss_colors__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tailwindcss_colors__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\nconst themeColors = (tailwindcss_colors__WEBPACK_IMPORTED_MODULE_0___default())\r\n\n\n//# sourceURL=webpack://elstar/./src/es/constant/theme-constant.js?");

/***/ }),

/***/ "./src/es/core/components/Affix.js":
/*!*****************************************!*\
  !*** ./src/es/core/components/Affix.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ affix)\n/* harmony export */ });\nfunction affix() {\r\n    const $affixElement = $('.affix');\r\n\r\n    if($affixElement) {\r\n\r\n        const offset = parseInt($affixElement.data('affix-offset'), 10) || 0;\r\n\r\n        const affixTop = $affixElement.offset()?.top;\r\n\r\n        $(window).on(\"scroll\",(function() {\r\n            const scrollTop = $(window).scrollTop();\r\n\r\n            if (scrollTop >= affixTop - offset) {\r\n                $affixElement.css({\r\n                    position: 'fixed',\r\n                    top: offset + 'px',\r\n                    width: '100%',\r\n                    zIndex: '30'\r\n                });\r\n            } else {\r\n                $affixElement.css({\r\n                    position: '',\r\n                    top: '',\r\n                    width: '',\r\n                    zIndex: ''\r\n                });\r\n            }\r\n        }));\r\n    }\r\n}\n\n//# sourceURL=webpack://elstar/./src/es/core/components/Affix.js?");

/***/ }),

/***/ "./src/es/core/components/Alert.js":
/*!*****************************************!*\
  !*** ./src/es/core/components/Alert.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Alert)\n/* harmony export */ });\nfunction Alert () {\r\n    const alertList = document.querySelectorAll('.alert')\r\n    alertList.forEach(function (alert) {\r\n        new bootstrap.Alert(alert)\r\n    })\r\n}\n\n//# sourceURL=webpack://elstar/./src/es/core/components/Alert.js?");

/***/ }),

/***/ "./src/es/core/components/Avatar.js":
/*!******************************************!*\
  !*** ./src/es/core/components/Avatar.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Avatar)\n/* harmony export */ });\nfunction Avatar () {\r\n    const elements = document.querySelectorAll('[data-avatar-size]');\r\n\r\n    elements.forEach((element) => {\r\n\r\n        const avatarSize = element.getAttribute('data-avatar-size');\r\n\r\n        element.style.width = `${avatarSize}px`;\r\n        element.style.height = `${avatarSize}px`;\r\n        element.style.minWidth = `${avatarSize}px`;\r\n        element.style.lineHeight = `${avatarSize}px`;\r\n    });\r\n}\n\n//# sourceURL=webpack://elstar/./src/es/core/components/Avatar.js?");

/***/ }),

/***/ "./src/es/core/components/DatePicker/Pickers.js":
/*!******************************************************!*\
  !*** ./src/es/core/components/DatePicker/Pickers.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DateRangePicker: () => (/* binding */ DateRangePicker),\n/* harmony export */   Datepicker: () => (/* binding */ Datepicker)\n/* harmony export */ });\nfunction hasProperty(obj, prop) {\r\n    return Object.prototype.hasOwnProperty.call(obj, prop);\r\n}\r\n\r\nfunction lastItemOf(arr) {\r\n    return arr[arr.length - 1];\r\n}\r\n\r\n// push only the items not included in the array\r\nfunction pushUnique(arr, ...items) {\r\n    items.forEach((item) => {\r\n        if (arr.includes(item)) {\r\n            return;\r\n        }\r\n        arr.push(item);\r\n    });\r\n    return arr;\r\n}\r\n\r\nfunction stringToArray(str, separator) {\r\n    // convert empty string to an empty array\r\n    return str ? str.split(separator) : [];\r\n}\r\n\r\nfunction isInRange(testVal, min, max) {\r\n    const minOK = min === undefined || testVal >= min;\r\n    const maxOK = max === undefined || testVal <= max;\r\n    return minOK && maxOK;\r\n}\r\n\r\nfunction limitToRange(val, min, max) {\r\n    if (val < min) {\r\n        return min;\r\n    }\r\n    if (val > max) {\r\n        return max;\r\n    }\r\n    return val;\r\n}\r\n\r\nfunction createTagRepeat(tagName, repeat, attributes = {}, index = 0, html = '') {\r\n    const openTagSrc = Object.keys(attributes).reduce((src, attr) => {\r\n        let val = attributes[attr];\r\n        if (typeof val === 'function') {\r\n            val = val(index);\r\n        }\r\n        return `${src} ${attr}=\"${val}\"`;\r\n    }, tagName);\r\n    html += `<${openTagSrc}></${tagName}>`;\r\n\r\n    const next = index + 1;\r\n    return next < repeat\r\n        ? createTagRepeat(tagName, repeat, attributes, next, html)\r\n        : html;\r\n}\r\n\r\n// Remove the spacing surrounding tags for HTML parser not to create text nodes\r\n// before/after elements\r\nfunction optimizeTemplateHTML(html) {\r\n    return html.replace(/>\\s+/g, '>').replace(/\\s+</, '<');\r\n}\r\n\r\nfunction stripTime(timeValue) {\r\n    return new Date(timeValue).setHours(0, 0, 0, 0);\r\n}\r\n\r\nfunction today() {\r\n    return new Date().setHours(0, 0, 0, 0);\r\n}\r\n\r\n// Get the time value of the start of given date or year, month and day\r\nfunction dateValue(...args) {\r\n    switch (args.length) {\r\n        case 0:\r\n            return today();\r\n        case 1:\r\n            return stripTime(args[0]);\r\n    }\r\n\r\n    // use setFullYear() to keep 2-digit year from being mapped to 1900-1999\r\n    const newDate = new Date(0);\r\n    newDate.setFullYear(...args);\r\n    return newDate.setHours(0, 0, 0, 0);\r\n}\r\n\r\nfunction addDays(date, amount) {\r\n    const newDate = new Date(date);\r\n    return newDate.setDate(newDate.getDate() + amount);\r\n}\r\n\r\nfunction addWeeks(date, amount) {\r\n    return addDays(date, amount * 7);\r\n}\r\n\r\nfunction addMonths(date, amount) {\r\n    // If the day of the date is not in the new month, the last day of the new\r\n    // month will be returned. e.g. Jan 31 + 1 month → Feb 28 (not Mar 03)\r\n    const newDate = new Date(date);\r\n    const monthsToSet = newDate.getMonth() + amount;\r\n    let expectedMonth = monthsToSet % 12;\r\n    if (expectedMonth < 0) {\r\n        expectedMonth += 12;\r\n    }\r\n\r\n    const time = newDate.setMonth(monthsToSet);\r\n    return newDate.getMonth() !== expectedMonth ? newDate.setDate(0) : time;\r\n}\r\n\r\nfunction addYears(date, amount) {\r\n    // If the date is Feb 29 and the new year is not a leap year, Feb 28 of the\r\n    // new year will be returned.\r\n    const newDate = new Date(date);\r\n    const expectedMonth = newDate.getMonth();\r\n    const time = newDate.setFullYear(newDate.getFullYear() + amount);\r\n    return expectedMonth === 1 && newDate.getMonth() === 2 ? newDate.setDate(0) : time;\r\n}\r\n\r\n// Calculate the distance bettwen 2 days of the week\r\nfunction dayDiff(day, from) {\r\n    return (day - from + 7) % 7;\r\n}\r\n\r\n// Get the date of the specified day of the week of given base date\r\nfunction dayOfTheWeekOf(baseDate, dayOfWeek, weekStart = 0) {\r\n    const baseDay = new Date(baseDate).getDay();\r\n    return addDays(baseDate, dayDiff(dayOfWeek, weekStart) - dayDiff(baseDay, weekStart));\r\n}\r\n\r\n// Get the ISO week of a date\r\nfunction getWeek(date) {\r\n    // start of ISO week is Monday\r\n    const thuOfTheWeek = dayOfTheWeekOf(date, 4, 1);\r\n    // 1st week == the week where the 4th of January is in\r\n    const firstThu = dayOfTheWeekOf(new Date(thuOfTheWeek).setMonth(0, 4), 4, 1);\r\n    return Math.round((thuOfTheWeek - firstThu) / 604800000) + 1;\r\n}\r\n\r\n// Get the start year of the period of years that includes given date\r\n// years: length of the year period\r\nfunction startOfYearPeriod(date, years) {\r\n    /* @see https://en.wikipedia.org/wiki/Year_zero#ISO_8601 */\r\n    const year = new Date(date).getFullYear();\r\n    return Math.floor(year / years) * years;\r\n}\r\n\r\n// pattern for format parts\r\nconst reFormatTokens = /dd?|DD?|mm?|MM?|yy?(?:yy)?/;\r\n// pattern for non date parts\r\nconst reNonDateParts = /[\\s!-/:-@[-`{-~年月日]+/;\r\n// cache for persed formats\r\nlet knownFormats = {};\r\n// parse funtions for date parts\r\nconst parseFns = {\r\n    y(date, year) {\r\n        return new Date(date).setFullYear(parseInt(year, 10));\r\n    },\r\n    m(date, month, locale) {\r\n        const newDate = new Date(date);\r\n        let monthIndex = parseInt(month, 10) - 1;\r\n\r\n        if (isNaN(monthIndex)) {\r\n            if (!month) {\r\n                return NaN;\r\n            }\r\n\r\n            const monthName = month.toLowerCase();\r\n            const compareNames = name => name.toLowerCase().startsWith(monthName);\r\n            // compare with both short and full names because some locales have periods\r\n            // in the short names (not equal to the first X letters of the full names)\r\n            monthIndex = locale.monthsShort.findIndex(compareNames);\r\n            if (monthIndex < 0) {\r\n                monthIndex = locale.months.findIndex(compareNames);\r\n            }\r\n            if (monthIndex < 0) {\r\n                return NaN;\r\n            }\r\n        }\r\n\r\n        newDate.setMonth(monthIndex);\r\n        return newDate.getMonth() !== normalizeMonth(monthIndex)\r\n            ? newDate.setDate(0)\r\n            : newDate.getTime();\r\n    },\r\n    d(date, day) {\r\n        return new Date(date).setDate(parseInt(day, 10));\r\n    },\r\n};\r\n// format functions for date parts\r\nconst formatFns = {\r\n    d(date) {\r\n        return date.getDate();\r\n    },\r\n    dd(date) {\r\n        return padZero(date.getDate(), 2);\r\n    },\r\n    D(date, locale) {\r\n        return locale.daysShort[date.getDay()];\r\n    },\r\n    DD(date, locale) {\r\n        return locale.days[date.getDay()];\r\n    },\r\n    m(date) {\r\n        return date.getMonth() + 1;\r\n    },\r\n    mm(date) {\r\n        return padZero(date.getMonth() + 1, 2);\r\n    },\r\n    M(date, locale) {\r\n        return locale.monthsShort[date.getMonth()];\r\n    },\r\n    MM(date, locale) {\r\n        return locale.months[date.getMonth()];\r\n    },\r\n    y(date) {\r\n        return date.getFullYear();\r\n    },\r\n    yy(date) {\r\n        return padZero(date.getFullYear(), 2).slice(-2);\r\n    },\r\n    yyyy(date) {\r\n        return padZero(date.getFullYear(), 4);\r\n    },\r\n};\r\n\r\n// get month index in normal range (0 - 11) from any number\r\nfunction normalizeMonth(monthIndex) {\r\n    return monthIndex > -1 ? monthIndex % 12 : normalizeMonth(monthIndex + 12);\r\n}\r\n\r\nfunction padZero(num, length) {\r\n    return num.toString().padStart(length, '0');\r\n}\r\n\r\nfunction parseFormatString(format) {\r\n    if (typeof format !== 'string') {\r\n        throw new Error(\"Invalid date format.\");\r\n    }\r\n    if (format in knownFormats) {\r\n        return knownFormats[format];\r\n    }\r\n\r\n    // sprit the format string into parts and seprators\r\n    const separators = format.split(reFormatTokens);\r\n    const parts = format.match(new RegExp(reFormatTokens, 'g'));\r\n    if (separators.length === 0 || !parts) {\r\n        throw new Error(\"Invalid date format.\");\r\n    }\r\n\r\n    // collect format functions used in the format\r\n    const partFormatters = parts.map(token => formatFns[token]);\r\n\r\n    // collect parse function keys used in the format\r\n    // iterate over parseFns' keys in order to keep the order of the keys.\r\n    const partParserKeys = Object.keys(parseFns).reduce((keys, key) => {\r\n        const token = parts.find(part => part[0] !== 'D' && part[0].toLowerCase() === key);\r\n        if (token) {\r\n            keys.push(key);\r\n        }\r\n        return keys;\r\n    }, []);\r\n\r\n    return knownFormats[format] = {\r\n        parser(dateStr, locale) {\r\n            const dateParts = dateStr.split(reNonDateParts).reduce((dtParts, part, index) => {\r\n                if (part.length > 0 && parts[index]) {\r\n                    const token = parts[index][0];\r\n                    if (token === 'M') {\r\n                        dtParts.m = part;\r\n                    } else if (token !== 'D') {\r\n                        dtParts[token] = part;\r\n                    }\r\n                }\r\n                return dtParts;\r\n            }, {});\r\n\r\n            // iterate over partParserkeys so that the parsing is made in the oder\r\n            // of year, month and day to prevent the day parser from correcting last\r\n            // day of month wrongly\r\n            return partParserKeys.reduce((origDate, key) => {\r\n                const newDate = parseFns[key](origDate, dateParts[key], locale);\r\n                // ingnore the part failed to parse\r\n                return isNaN(newDate) ? origDate : newDate;\r\n            }, today());\r\n        },\r\n        formatter(date, locale) {\r\n            let dateStr = partFormatters.reduce((str, fn, index) => {\r\n                return str += `${separators[index]}${fn(date, locale)}`;\r\n            }, '');\r\n            // separators' length is always parts' length + 1,\r\n            return dateStr += lastItemOf(separators);\r\n        },\r\n    };\r\n}\r\n\r\nfunction parseDate(dateStr, format, locale) {\r\n    if (dateStr instanceof Date || typeof dateStr === 'number') {\r\n        const date = stripTime(dateStr);\r\n        return isNaN(date) ? undefined : date;\r\n    }\r\n    if (!dateStr) {\r\n        return undefined;\r\n    }\r\n    if (dateStr === 'today') {\r\n        return today();\r\n    }\r\n\r\n    if (format && format.toValue) {\r\n        const date = format.toValue(dateStr, format, locale);\r\n        return isNaN(date) ? undefined : stripTime(date);\r\n    }\r\n\r\n    return parseFormatString(format).parser(dateStr, locale);\r\n}\r\n\r\nfunction formatDate(date, format, locale) {\r\n    if (isNaN(date) || (!date && date !== 0)) {\r\n        return '';\r\n    }\r\n\r\n    const dateObj = typeof date === 'number' ? new Date(date) : date;\r\n\r\n    if (format.toDisplay) {\r\n        return format.toDisplay(dateObj, format, locale);\r\n    }\r\n\r\n    return parseFormatString(format).formatter(dateObj, locale);\r\n}\r\n\r\nconst listenerRegistry = new WeakMap();\r\nconst { addEventListener, removeEventListener } = EventTarget.prototype;\r\n\r\n// Register event listeners to a key object\r\n// listeners: array of listener definitions;\r\n//   - each definition must be a flat array of event target and the arguments\r\n//     used to call addEventListener() on the target\r\nfunction registerListeners(keyObj, listeners) {\r\n    let registered = listenerRegistry.get(keyObj);\r\n    if (!registered) {\r\n        registered = [];\r\n        listenerRegistry.set(keyObj, registered);\r\n    }\r\n    listeners.forEach((listener) => {\r\n        addEventListener.call(...listener);\r\n        registered.push(listener);\r\n    });\r\n}\r\n\r\nfunction unregisterListeners(keyObj) {\r\n    let listeners = listenerRegistry.get(keyObj);\r\n    if (!listeners) {\r\n        return;\r\n    }\r\n    listeners.forEach((listener) => {\r\n        removeEventListener.call(...listener);\r\n    });\r\n    listenerRegistry.delete(keyObj);\r\n}\r\n\r\n// Event.composedPath() polyfill for Edge\r\n// based on https://gist.github.com/kleinfreund/e9787d73776c0e3750dcfcdc89f100ec\r\nif (!Event.prototype.composedPath) {\r\n    const getComposedPath = (node, path = []) => {\r\n        path.push(node);\r\n\r\n        let parent;\r\n        if (node.parentNode) {\r\n            parent = node.parentNode;\r\n        } else if (node.host) { // ShadowRoot\r\n            parent = node.host;\r\n        } else if (node.defaultView) {  // Document\r\n            parent = node.defaultView;\r\n        }\r\n        return parent ? getComposedPath(parent, path) : path;\r\n    };\r\n\r\n    Event.prototype.composedPath = function () {\r\n        return getComposedPath(this.target);\r\n    };\r\n}\r\n\r\nfunction findFromPath(path, criteria, currentTarget, index = 0) {\r\n    const el = path[index];\r\n    if (criteria(el)) {\r\n        return el;\r\n    } else if (el === currentTarget || !el.parentElement) {\r\n        // stop when reaching currentTarget or <html>\r\n        return;\r\n    }\r\n    return findFromPath(path, criteria, currentTarget, index + 1);\r\n}\r\n\r\n// Search for the actual target of a delegated event\r\nfunction findElementInEventPath(ev, selector) {\r\n    const criteria = typeof selector === 'function' ? selector : el => el.matches(selector);\r\n    return findFromPath(ev.composedPath(), criteria, ev.currentTarget);\r\n}\r\n\r\n// default locales\r\nconst locales = {\r\n    en: {\r\n        days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\r\n        daysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\r\n        daysMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\r\n        months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\r\n        monthsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\r\n        today: \"Today\",\r\n        clear: \"Clear\",\r\n        titleFormat: \"MM y\"\r\n    }\r\n};\r\n\r\n// config options updatable by setOptions() and their default values\r\nconst defaultOptions = {\r\n    autohide: false,\r\n    beforeShowDay: null,\r\n    beforeShowDecade: null,\r\n    beforeShowMonth: null,\r\n    beforeShowYear: null,\r\n    calendarWeeks: false,\r\n    clearBtn: false,\r\n    dateDelimiter: ',',\r\n    datesDisabled: [],\r\n    daysOfWeekDisabled: [],\r\n    daysOfWeekHighlighted: [],\r\n    defaultViewDate: undefined, // placeholder, defaults to today() by the program\r\n    disableTouchKeyboard: false,\r\n    format: 'mm/dd/yyyy',\r\n    language: 'en',\r\n    maxDate: null,\r\n    maxNumberOfDates: 1,\r\n    maxView: 3,\r\n    minDate: null,\r\n    nextArrow: '<svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 20 20\" aria-hidden=\"true\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clip-rule=\"evenodd\"></path></svg>',\r\n    orientation: 'auto',\r\n    pickLevel: 0,\r\n    prevArrow: '<svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 20 20\" aria-hidden=\"true\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\" clip-rule=\"evenodd\"></path></svg>',\r\n    showDaysOfWeek: true,\r\n    showOnClick: true,\r\n    showOnFocus: true,\r\n    startView: 0,\r\n    title: '',\r\n    todayBtn: false,\r\n    todayBtnMode: 0,\r\n    todayHighlight: false,\r\n    updateOnBlur: true,\r\n    weekStart: 0,\r\n};\r\n\r\nconst range = document.createRange();\r\n\r\nfunction parseHTML(html) {\r\n    return range.createContextualFragment(html);\r\n}\r\n\r\nfunction hideElement(el) {\r\n    if (el.style.display === 'none') {\r\n        return;\r\n    }\r\n    // back up the existing display setting in data-style-display\r\n    if (el.style.display) {\r\n        el.dataset.styleDisplay = el.style.display;\r\n    }\r\n    el.style.display = 'none';\r\n}\r\n\r\nfunction showElement(el) {\r\n    if (el.style.display !== 'none') {\r\n        return;\r\n    }\r\n    if (el.dataset.styleDisplay) {\r\n        // restore backed-up dispay property\r\n        el.style.display = el.dataset.styleDisplay;\r\n        delete el.dataset.styleDisplay;\r\n    } else {\r\n        el.style.display = '';\r\n    }\r\n}\r\n\r\nfunction emptyChildNodes(el) {\r\n    if (el.firstChild) {\r\n        el.removeChild(el.firstChild);\r\n        emptyChildNodes(el);\r\n    }\r\n}\r\n\r\nfunction replaceChildNodes(el, newChildNodes) {\r\n    emptyChildNodes(el);\r\n    if (newChildNodes instanceof DocumentFragment) {\r\n        el.appendChild(newChildNodes);\r\n    } else if (typeof newChildNodes === 'string') {\r\n        el.appendChild(parseHTML(newChildNodes));\r\n    } else if (typeof newChildNodes.forEach === 'function') {\r\n        newChildNodes.forEach((node) => {\r\n            el.appendChild(node);\r\n        });\r\n    }\r\n}\r\n\r\nconst {\r\n    language: defaultLang,\r\n    format: defaultFormat,\r\n    weekStart: defaultWeekStart,\r\n} = defaultOptions;\r\n\r\n// Reducer function to filter out invalid day-of-week from the input\r\nfunction sanitizeDOW(dow, day) {\r\n    return dow.length < 6 && day >= 0 && day < 7\r\n        ? pushUnique(dow, day)\r\n        : dow;\r\n}\r\n\r\nfunction calcEndOfWeek(startOfWeek) {\r\n    return (startOfWeek + 6) % 7;\r\n}\r\n\r\n// validate input date. if invalid, fallback to the original value\r\nfunction validateDate(value, format, locale, origValue) {\r\n    const date = parseDate(value, format, locale);\r\n    return date !== undefined ? date : origValue;\r\n}\r\n\r\n// Validate viewId. if invalid, fallback to the original value\r\nfunction validateViewId(value, origValue, max = 3) {\r\n    const viewId = parseInt(value, 10);\r\n    return viewId >= 0 && viewId <= max ? viewId : origValue;\r\n}\r\n\r\n// Create Datepicker configuration to set\r\nfunction processOptions(options, datepicker) {\r\n    const inOpts = Object.assign({}, options);\r\n    const config = {};\r\n    const locales = datepicker.constructor.locales;\r\n    let {\r\n        format,\r\n        language,\r\n        locale,\r\n        maxDate,\r\n        maxView,\r\n        minDate,\r\n        pickLevel,\r\n        startView,\r\n        weekStart,\r\n    } = datepicker.config || {};\r\n\r\n    if (inOpts.language) {\r\n        let lang;\r\n        if (inOpts.language !== language) {\r\n            if (locales[inOpts.language]) {\r\n                lang = inOpts.language;\r\n            } else {\r\n                // Check if langauge + region tag can fallback to the one without\r\n                // region (e.g. fr-CA → fr)\r\n                lang = inOpts.language.split('-')[0];\r\n                if (locales[lang] === undefined) {\r\n                    lang = false;\r\n                }\r\n            }\r\n        }\r\n        delete inOpts.language;\r\n        if (lang) {\r\n            language = config.language = lang;\r\n\r\n            // update locale as well when updating language\r\n            const origLocale = locale || locales[defaultLang];\r\n            // use default language's properties for the fallback\r\n            locale = Object.assign({\r\n                format: defaultFormat,\r\n                weekStart: defaultWeekStart\r\n            }, locales[defaultLang]);\r\n            if (language !== defaultLang) {\r\n                Object.assign(locale, locales[language]);\r\n            }\r\n            config.locale = locale;\r\n            // if format and/or weekStart are the same as old locale's defaults,\r\n            // update them to new locale's defaults\r\n            if (format === origLocale.format) {\r\n                format = config.format = locale.format;\r\n            }\r\n            if (weekStart === origLocale.weekStart) {\r\n                weekStart = config.weekStart = locale.weekStart;\r\n                config.weekEnd = calcEndOfWeek(locale.weekStart);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (inOpts.format) {\r\n        const hasToDisplay = typeof inOpts.format.toDisplay === 'function';\r\n        const hasToValue = typeof inOpts.format.toValue === 'function';\r\n        const validFormatString = reFormatTokens.test(inOpts.format);\r\n        if ((hasToDisplay && hasToValue) || validFormatString) {\r\n            format = config.format = inOpts.format;\r\n        }\r\n        delete inOpts.format;\r\n    }\r\n\r\n    //*** dates ***//\r\n    // while min and maxDate for \"no limit\" in the options are better to be null\r\n    // (especially when updating), the ones in the config have to be undefined\r\n    // because null is treated as 0 (= unix epoch) when comparing with time value\r\n    let minDt = minDate;\r\n    let maxDt = maxDate;\r\n    if (inOpts.minDate !== undefined) {\r\n        minDt = inOpts.minDate === null\r\n            ? dateValue(0, 0, 1)  // set 0000-01-01 to prevent negative values for year\r\n            : validateDate(inOpts.minDate, format, locale, minDt);\r\n        delete inOpts.minDate;\r\n    }\r\n    if (inOpts.maxDate !== undefined) {\r\n        maxDt = inOpts.maxDate === null\r\n            ? undefined\r\n            : validateDate(inOpts.maxDate, format, locale, maxDt);\r\n        delete inOpts.maxDate;\r\n    }\r\n    if (maxDt < minDt) {\r\n        minDate = config.minDate = maxDt;\r\n        maxDate = config.maxDate = minDt;\r\n    } else {\r\n        if (minDate !== minDt) {\r\n            minDate = config.minDate = minDt;\r\n        }\r\n        if (maxDate !== maxDt) {\r\n            maxDate = config.maxDate = maxDt;\r\n        }\r\n    }\r\n\r\n    if (inOpts.datesDisabled) {\r\n        config.datesDisabled = inOpts.datesDisabled.reduce((dates, dt) => {\r\n            const date = parseDate(dt, format, locale);\r\n            return date !== undefined ? pushUnique(dates, date) : dates;\r\n        }, []);\r\n        delete inOpts.datesDisabled;\r\n    }\r\n    if (inOpts.defaultViewDate !== undefined) {\r\n        const viewDate = parseDate(inOpts.defaultViewDate, format, locale);\r\n        if (viewDate !== undefined) {\r\n            config.defaultViewDate = viewDate;\r\n        }\r\n        delete inOpts.defaultViewDate;\r\n    }\r\n\r\n    //*** days of week ***//\r\n    if (inOpts.weekStart !== undefined) {\r\n        const wkStart = Number(inOpts.weekStart) % 7;\r\n        if (!isNaN(wkStart)) {\r\n            weekStart = config.weekStart = wkStart;\r\n            config.weekEnd = calcEndOfWeek(wkStart);\r\n        }\r\n        delete inOpts.weekStart;\r\n    }\r\n    if (inOpts.daysOfWeekDisabled) {\r\n        config.daysOfWeekDisabled = inOpts.daysOfWeekDisabled.reduce(sanitizeDOW, []);\r\n        delete inOpts.daysOfWeekDisabled;\r\n    }\r\n    if (inOpts.daysOfWeekHighlighted) {\r\n        config.daysOfWeekHighlighted = inOpts.daysOfWeekHighlighted.reduce(sanitizeDOW, []);\r\n        delete inOpts.daysOfWeekHighlighted;\r\n    }\r\n\r\n    //*** multi date ***//\r\n    if (inOpts.maxNumberOfDates !== undefined) {\r\n        const maxNumberOfDates = parseInt(inOpts.maxNumberOfDates, 10);\r\n        if (maxNumberOfDates >= 0) {\r\n            config.maxNumberOfDates = maxNumberOfDates;\r\n            config.multidate = maxNumberOfDates !== 1;\r\n        }\r\n        delete inOpts.maxNumberOfDates;\r\n    }\r\n    if (inOpts.dateDelimiter) {\r\n        config.dateDelimiter = String(inOpts.dateDelimiter);\r\n        delete inOpts.dateDelimiter;\r\n    }\r\n\r\n    //*** pick level & view ***//\r\n    let newPickLevel = pickLevel;\r\n    if (inOpts.pickLevel !== undefined) {\r\n        newPickLevel = validateViewId(inOpts.pickLevel, 2);\r\n        delete inOpts.pickLevel;\r\n    }\r\n    if (newPickLevel !== pickLevel) {\r\n        pickLevel = config.pickLevel = newPickLevel;\r\n    }\r\n\r\n    let newMaxView = maxView;\r\n    if (inOpts.maxView !== undefined) {\r\n        newMaxView = validateViewId(inOpts.maxView, maxView);\r\n        delete inOpts.maxView;\r\n    }\r\n    // ensure max view >= pick level\r\n    newMaxView = pickLevel > newMaxView ? pickLevel : newMaxView;\r\n    if (newMaxView !== maxView) {\r\n        maxView = config.maxView = newMaxView;\r\n    }\r\n\r\n    let newStartView = startView;\r\n    if (inOpts.startView !== undefined) {\r\n        newStartView = validateViewId(inOpts.startView, newStartView);\r\n        delete inOpts.startView;\r\n    }\r\n    // ensure pick level <= start view <= max view\r\n    if (newStartView < pickLevel) {\r\n        newStartView = pickLevel;\r\n    } else if (newStartView > maxView) {\r\n        newStartView = maxView;\r\n    }\r\n    if (newStartView !== startView) {\r\n        config.startView = newStartView;\r\n    }\r\n\r\n    //*** template ***//\r\n    if (inOpts.prevArrow) {\r\n        const prevArrow = parseHTML(inOpts.prevArrow);\r\n        if (prevArrow.childNodes.length > 0) {\r\n            config.prevArrow = prevArrow.childNodes;\r\n        }\r\n        delete inOpts.prevArrow;\r\n    }\r\n    if (inOpts.nextArrow) {\r\n        const nextArrow = parseHTML(inOpts.nextArrow);\r\n        if (nextArrow.childNodes.length > 0) {\r\n            config.nextArrow = nextArrow.childNodes;\r\n        }\r\n        delete inOpts.nextArrow;\r\n    }\r\n\r\n    //*** misc ***//\r\n    if (inOpts.disableTouchKeyboard !== undefined) {\r\n        config.disableTouchKeyboard = 'ontouchstart' in document && !!inOpts.disableTouchKeyboard;\r\n        delete inOpts.disableTouchKeyboard;\r\n    }\r\n    if (inOpts.orientation) {\r\n        const orientation = inOpts.orientation.toLowerCase().split(/\\s+/g);\r\n        config.orientation = {\r\n            x: orientation.find(x => (x === 'left' || x === 'right')) || 'auto',\r\n            y: orientation.find(y => (y === 'top' || y === 'bottom')) || 'auto',\r\n        };\r\n        delete inOpts.orientation;\r\n    }\r\n    if (inOpts.todayBtnMode !== undefined) {\r\n        switch (inOpts.todayBtnMode) {\r\n            case 0:\r\n            case 1:\r\n                config.todayBtnMode = inOpts.todayBtnMode;\r\n        }\r\n        delete inOpts.todayBtnMode;\r\n    }\r\n\r\n    //*** copy the rest ***//\r\n    Object.keys(inOpts).forEach((key) => {\r\n        if (inOpts[key] !== undefined && hasProperty(defaultOptions, key)) {\r\n            config[key] = inOpts[key];\r\n        }\r\n    });\r\n\r\n    return config;\r\n}\r\n\r\nconst pickerTemplate = optimizeTemplateHTML(`<div class=\"datepicker hidden\">\r\n    <div class=\"datepicker-picker\">\r\n      <div class=\"datepicker-header\">\r\n        <div class=\"datepicker-title bg-white dark:bg-gray-700 dark:text-white px-2 py-3 text-center font-semibold\"></div>\r\n        <div class=\"datepicker-controls flex justify-between mb-2 items-center\">\r\n          <button type=\"button\" class=\"prev-btn button bg-transparent rounded-lg border border-transparent hover:bg-gray-50 dark:hover:bg-gray-600 active:bg-gray-100 dark:active:bg-gray-500 dark:active:border-gray-500 text-gray-600 dark:text-gray-100 radius-round h-9 w-9 inline-flex items-center justify-center text-lg\"></button>\r\n          <button type=\"button\" class=\"view-switch text-base rounded-lg text-gray-900 dark:text-white bg-white dark:bg-gray-700 font-semibold py-2.5 px-5 hover:bg-gray-100 dark:hover:bg-gray-600\"></button>\r\n          <button type=\"button\" class=\"next-btn button bg-transparent rounded-lg border border-transparent hover:bg-gray-50 dark:hover:bg-gray-600 active:bg-gray-100 dark:active:bg-gray-500 dark:active:border-gray-500 text-gray-600 dark:text-gray-100 radius-round h-9 w-9 inline-flex items-center justify-center text-lg\"></button>\r\n        </div>\r\n      </div>\r\n      <div class=\"datepicker-main p-1\"></div>\r\n      <div class=\"datepicker-footer\">\r\n        <div class=\"datepicker-controls flex space-x-2 mt-2\">\r\n          <button type=\"button\" class=\"%buttonClass% today-btn text-white bg-primary-600 dark:bg-primary-600 hover:bg-primary-800 dark:hover:bg-primary-600 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2 text-center w-1/2\"></button>\r\n          <button type=\"button\" class=\"%buttonClass% clear-btn text-gray-900 dark:text-white bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2 text-center w-1/2\"></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>`);\r\n\r\nconst daysTemplate = optimizeTemplateHTML(`<div class=\"days\">\r\n    <div class=\"days-of-week grid grid-cols-7 mb-1\">${createTagRepeat('span', 7, { class: 'dow block flex-1 leading-9 border-0 rounded-lg cursor-default text-center text-gray-900 font-semibold text-sm' })}</div>\r\n    <div class=\"datepicker-grid grid grid-cols-7\">${createTagRepeat('span', 42, { class: 'block flex-1 leading-9 border-0 rounded-lg cursor-default text-center text-gray-900 font-semibold text-sm h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400' })}</div>\r\n  </div>`);\r\n\r\nconst calendarWeeksTemplate = optimizeTemplateHTML(`<div class=\"calendar-weeks\">\r\n    <div class=\"days-of-week flex\"><span class=\"dow h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400\"></span>\r\n                    </div>\r\n    <div class=\"weeks\">${createTagRepeat('span', 6, { class: 'week block flex-1 leading-9 border-0 rounded-lg cursor-default text-center text-gray-900 font-semibold text-sm' })}</div>\r\n  </div>`);\r\n\r\n// Base class of the view classes\r\nclass View {\r\n    constructor(picker, config) {\r\n        Object.assign(this, config, {\r\n            picker,\r\n            element: parseHTML(`<div class=\"datepicker-view flex\"></div>`).firstChild,\r\n            selected: [],\r\n        });\r\n        this.init(this.picker.datepicker.config);\r\n    }\r\n\r\n    init(options) {\r\n        if (options.pickLevel !== undefined) {\r\n            this.isMinView = this.id === options.pickLevel;\r\n        }\r\n        this.setOptions(options);\r\n        this.updateFocus();\r\n        this.updateSelection();\r\n    }\r\n\r\n    // Execute beforeShow() callback and apply the result to the element\r\n    // args:\r\n    // - current - current value on the iteration on view rendering\r\n    // - timeValue - time value of the date to pass to beforeShow()\r\n    performBeforeHook(el, current, timeValue) {\r\n        let result = this.beforeShow(new Date(timeValue));\r\n        switch (typeof result) {\r\n            case 'boolean':\r\n                result = { enabled: result };\r\n                break;\r\n            case 'string':\r\n                result = { classes: result };\r\n        }\r\n\r\n        if (result) {\r\n            if (result.enabled === false) {\r\n                el.classList.add('disabled');\r\n                pushUnique(this.disabled, current);\r\n            }\r\n            if (result.classes) {\r\n                const extraClasses = result.classes.split(/\\s+/);\r\n                el.classList.add(...extraClasses);\r\n                if (extraClasses.includes('disabled')) {\r\n                    pushUnique(this.disabled, current);\r\n                }\r\n            }\r\n            if (result.content) {\r\n                replaceChildNodes(el, result.content);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass DaysView extends View {\r\n    constructor(picker) {\r\n        super(picker, {\r\n            id: 0,\r\n            name: 'days',\r\n            cellClass: 'day',\r\n        });\r\n    }\r\n\r\n    init(options, onConstruction = true) {\r\n        if (onConstruction) {\r\n            const inner = parseHTML(daysTemplate).firstChild;\r\n            this.dow = inner.firstChild;\r\n            this.grid = inner.lastChild;\r\n            this.element.appendChild(inner);\r\n        }\r\n        super.init(options);\r\n    }\r\n\r\n    setOptions(options) {\r\n        let updateDOW;\r\n\r\n        if (hasProperty(options, 'minDate')) {\r\n            this.minDate = options.minDate;\r\n        }\r\n        if (hasProperty(options, 'maxDate')) {\r\n            this.maxDate = options.maxDate;\r\n        }\r\n        if (options.datesDisabled) {\r\n            this.datesDisabled = options.datesDisabled;\r\n        }\r\n        if (options.daysOfWeekDisabled) {\r\n            this.daysOfWeekDisabled = options.daysOfWeekDisabled;\r\n            updateDOW = true;\r\n        }\r\n        if (options.daysOfWeekHighlighted) {\r\n            this.daysOfWeekHighlighted = options.daysOfWeekHighlighted;\r\n        }\r\n        if (options.todayHighlight !== undefined) {\r\n            this.todayHighlight = options.todayHighlight;\r\n        }\r\n        if (options.weekStart !== undefined) {\r\n            this.weekStart = options.weekStart;\r\n            this.weekEnd = options.weekEnd;\r\n            updateDOW = true;\r\n        }\r\n        if (options.locale) {\r\n            const locale = this.locale = options.locale;\r\n            this.dayNames = locale.daysMin;\r\n            this.switchLabelFormat = locale.titleFormat;\r\n            updateDOW = true;\r\n        }\r\n        if (options.beforeShowDay !== undefined) {\r\n            this.beforeShow = typeof options.beforeShowDay === 'function'\r\n                ? options.beforeShowDay\r\n                : undefined;\r\n        }\r\n\r\n        if (options.calendarWeeks !== undefined) {\r\n            if (options.calendarWeeks && !this.calendarWeeks) {\r\n                const weeksElem = parseHTML(calendarWeeksTemplate).firstChild;\r\n                this.calendarWeeks = {\r\n                    element: weeksElem,\r\n                    dow: weeksElem.firstChild,\r\n                    weeks: weeksElem.lastChild,\r\n                };\r\n                this.element.insertBefore(weeksElem, this.element.firstChild);\r\n            } else if (this.calendarWeeks && !options.calendarWeeks) {\r\n                this.element.removeChild(this.calendarWeeks.element);\r\n                this.calendarWeeks = null;\r\n            }\r\n        }\r\n        if (options.showDaysOfWeek !== undefined) {\r\n            if (options.showDaysOfWeek) {\r\n                showElement(this.dow);\r\n                if (this.calendarWeeks) {\r\n                    showElement(this.calendarWeeks.dow);\r\n                }\r\n            } else {\r\n                hideElement(this.dow);\r\n                if (this.calendarWeeks) {\r\n                    hideElement(this.calendarWeeks.dow);\r\n                }\r\n            }\r\n        }\r\n\r\n        // update days-of-week when locale, daysOfweekDisabled or weekStart is changed\r\n        if (updateDOW) {\r\n            Array.from(this.dow.children).forEach((el, index) => {\r\n                const dow = (this.weekStart + index) % 7;\r\n                el.textContent = this.dayNames[dow];\r\n                el.className = this.daysOfWeekDisabled.includes(dow) ? 'dow disabled text-center h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400 cursor-not-allowed' : 'dow text-center h-6 leading-6 text-sm font-medium text-gray-500 dark:text-gray-400';\r\n            });\r\n        }\r\n    }\r\n\r\n    // Apply update on the focused date to view's settings\r\n    updateFocus() {\r\n        const viewDate = new Date(this.picker.viewDate);\r\n        const viewYear = viewDate.getFullYear();\r\n        const viewMonth = viewDate.getMonth();\r\n        const firstOfMonth = dateValue(viewYear, viewMonth, 1);\r\n        const start = dayOfTheWeekOf(firstOfMonth, this.weekStart, this.weekStart);\r\n\r\n        this.first = firstOfMonth;\r\n        this.last = dateValue(viewYear, viewMonth + 1, 0);\r\n        this.start = start;\r\n        this.focused = this.picker.viewDate;\r\n    }\r\n\r\n    // Apply update on the selected dates to view's settings\r\n    updateSelection() {\r\n        const { dates, rangepicker } = this.picker.datepicker;\r\n        this.selected = dates;\r\n        if (rangepicker) {\r\n            this.range = rangepicker.dates;\r\n        }\r\n    }\r\n\r\n    // Update the entire view UI\r\n    render() {\r\n        // update today marker on ever render\r\n        this.today = this.todayHighlight ? today() : undefined;\r\n        // refresh disabled dates on every render in order to clear the ones added\r\n        // by beforeShow hook at previous render\r\n        this.disabled = [...this.datesDisabled];\r\n\r\n        const switchLabel = formatDate(this.focused, this.switchLabelFormat, this.locale);\r\n        this.picker.setViewSwitchLabel(switchLabel);\r\n        this.picker.setPrevBtnDisabled(this.first <= this.minDate);\r\n        this.picker.setNextBtnDisabled(this.last >= this.maxDate);\r\n\r\n        if (this.calendarWeeks) {\r\n            // start of the UTC week (Monday) of the 1st of the month\r\n            const startOfWeek = dayOfTheWeekOf(this.first, 1, 1);\r\n            Array.from(this.calendarWeeks.weeks.children).forEach((el, index) => {\r\n                el.textContent = getWeek(addWeeks(startOfWeek, index));\r\n            });\r\n        }\r\n        Array.from(this.grid.children).forEach((el, index) => {\r\n            const classList = el.classList;\r\n            const current = addDays(this.start, index);\r\n            const date = new Date(current);\r\n            const day = date.getDay();\r\n\r\n            el.className = `datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ${this.cellClass}`;\r\n            el.dataset.date = current;\r\n            el.textContent = date.getDate();\r\n\r\n            if (current < this.first) {\r\n                classList.add('prev', 'text-gray-500', 'dark:text-white');\r\n            } else if (current > this.last) {\r\n                classList.add('next', 'text-gray-500', 'dark:text-white');\r\n            }\r\n            if (this.today === current) {\r\n                classList.add('today', 'bg-gray-100', 'dark:bg-gray-600');\r\n            }\r\n            if (current < this.minDate || current > this.maxDate || this.disabled.includes(current)) {\r\n                classList.add('disabled', 'cursor-not-allowed');\r\n            }\r\n            if (this.daysOfWeekDisabled.includes(day)) {\r\n                classList.add('disabled', 'cursor-not-allowed');\r\n                pushUnique(this.disabled, current);\r\n            }\r\n            if (this.daysOfWeekHighlighted.includes(day)) {\r\n                classList.add('highlighted');\r\n            }\r\n            if (this.range) {\r\n                const [rangeStart, rangeEnd] = this.range;\r\n                if (current > rangeStart && current < rangeEnd) {\r\n                    classList.add('range', 'bg-primary-100', 'dark:bg-gray-600');\r\n                    classList.remove('rounded-lg', 'rounded-l-lg', 'rounded-r-lg');\r\n                }\r\n                if (current === rangeStart) {\r\n                    classList.add('range-start', 'bg-gray-100', 'dark:bg-gray-600', 'rounded-l-lg');\r\n                    classList.remove('rounded-lg', 'rounded-r-lg');\r\n                }\r\n                if (current === rangeEnd) {\r\n                    classList.add('range-end', 'bg-gray-100', 'dark:bg-gray-600', 'rounded-r-lg');\r\n                    classList.remove('rounded-lg', 'rounded-l-lg');\r\n                }\r\n            }\r\n            if (this.selected.includes(current)) {\r\n                classList.add('selected', 'bg-primary-600', 'text-white', 'dark:bg-primary-600', 'dark:text-white');\r\n                classList.remove('text-gray-900', 'text-gray-500', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600', 'dark:bg-gray-600', 'bg-gray-100', 'bg-primary-100');\r\n            }\r\n            if (current === this.focused) {\r\n                classList.add('focused');\r\n            }\r\n\r\n            if (this.beforeShow) {\r\n                this.performBeforeHook(el, current, current);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Update the view UI by applying the changes of selected and focused items\r\n    refresh() {\r\n        const [rangeStart, rangeEnd] = this.range || [];\r\n        this.grid\r\n            .querySelectorAll('.range, .range-start, .range-end, .selected, .focused')\r\n            .forEach((el) => {\r\n                el.classList.remove('range', 'range-start', 'range-end', 'selected', 'bg-primary-600', 'text-white', 'dark:bg-primary-600', 'dark:text-white', 'focused');\r\n                el.classList.add('text-gray-900', 'rounded-lg', 'dark:text-white');\r\n            });\r\n        Array.from(this.grid.children).forEach((el) => {\r\n            const current = Number(el.dataset.date);\r\n            const classList = el.classList;\r\n            classList.remove('bg-primary-100', 'dark:bg-gray-600', 'rounded-l-lg', 'rounded-r-lg');\r\n            if (current > rangeStart && current < rangeEnd) {\r\n                classList.add('range', 'bg-primary-100', 'dark:bg-gray-600');\r\n                classList.remove('rounded-lg');\r\n            }\r\n            if (current === rangeStart) {\r\n                classList.add('range-start', 'bg-primary-100', 'dark:bg-gray-600', 'rounded-l-lg');\r\n                classList.remove('rounded-lg', 'rounded-r-lg');\r\n            }\r\n            if (current === rangeEnd) {\r\n                classList.add('range-end', 'bg-primary-100', 'dark:bg-gray-600', 'rounded-r-lg');\r\n                classList.remove('rounded-lg', 'rounded-l-lg');\r\n            }\r\n            if (this.selected.includes(current)) {\r\n                classList.add('selected', 'bg-primary-600', 'text-white', 'dark:bg-primary-600', 'dark:text-white');\r\n                classList.remove('text-gray-900', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600', 'bg-gray-100', 'bg-primary-100', 'dark:bg-gray-600');\r\n            }\r\n            if (current === this.focused) {\r\n                classList.add('focused');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Update the view UI by applying the change of focused item\r\n    refreshFocus() {\r\n        const index = Math.round((this.focused - this.start) / 86400000);\r\n        this.grid.querySelectorAll('.focused').forEach((el) => {\r\n            el.classList.remove('focused');\r\n        });\r\n        this.grid.children[index].classList.add('focused');\r\n    }\r\n}\r\n\r\nfunction computeMonthRange(range, thisYear) {\r\n    if (!range || !range[0] || !range[1]) {\r\n        return;\r\n    }\r\n\r\n    const [[startY, startM], [endY, endM]] = range;\r\n    if (startY > thisYear || endY < thisYear) {\r\n        return;\r\n    }\r\n    return [\r\n        startY === thisYear ? startM : -1,\r\n        endY === thisYear ? endM : 12,\r\n    ];\r\n}\r\n\r\nclass MonthsView extends View {\r\n    constructor(picker) {\r\n        super(picker, {\r\n            id: 1,\r\n            name: 'months',\r\n            cellClass: 'month',\r\n        });\r\n    }\r\n\r\n    init(options, onConstruction = true) {\r\n        if (onConstruction) {\r\n            this.grid = this.element;\r\n            this.element.classList.add('months', 'datepicker-grid', 'grid', 'grid-cols-4');\r\n            this.grid.appendChild(parseHTML(createTagRepeat('span', 12, { 'data-month': ix => ix })));\r\n        }\r\n        super.init(options);\r\n    }\r\n\r\n    setOptions(options) {\r\n        if (options.locale) {\r\n            this.monthNames = options.locale.monthsShort;\r\n        }\r\n        if (hasProperty(options, 'minDate')) {\r\n            if (options.minDate === undefined) {\r\n                this.minYear = this.minMonth = this.minDate = undefined;\r\n            } else {\r\n                const minDateObj = new Date(options.minDate);\r\n                this.minYear = minDateObj.getFullYear();\r\n                this.minMonth = minDateObj.getMonth();\r\n                this.minDate = minDateObj.setDate(1);\r\n            }\r\n        }\r\n        if (hasProperty(options, 'maxDate')) {\r\n            if (options.maxDate === undefined) {\r\n                this.maxYear = this.maxMonth = this.maxDate = undefined;\r\n            } else {\r\n                const maxDateObj = new Date(options.maxDate);\r\n                this.maxYear = maxDateObj.getFullYear();\r\n                this.maxMonth = maxDateObj.getMonth();\r\n                this.maxDate = dateValue(this.maxYear, this.maxMonth + 1, 0);\r\n            }\r\n        }\r\n        if (options.beforeShowMonth !== undefined) {\r\n            this.beforeShow = typeof options.beforeShowMonth === 'function'\r\n                ? options.beforeShowMonth\r\n                : undefined;\r\n        }\r\n    }\r\n\r\n    // Update view's settings to reflect the viewDate set on the picker\r\n    updateFocus() {\r\n        const viewDate = new Date(this.picker.viewDate);\r\n        this.year = viewDate.getFullYear();\r\n        this.focused = viewDate.getMonth();\r\n    }\r\n\r\n    // Update view's settings to reflect the selected dates\r\n    updateSelection() {\r\n        const { dates, rangepicker } = this.picker.datepicker;\r\n        this.selected = dates.reduce((selected, timeValue) => {\r\n            const date = new Date(timeValue);\r\n            const year = date.getFullYear();\r\n            const month = date.getMonth();\r\n            if (selected[year] === undefined) {\r\n                selected[year] = [month];\r\n            } else {\r\n                pushUnique(selected[year], month);\r\n            }\r\n            return selected;\r\n        }, {});\r\n        if (rangepicker && rangepicker.dates) {\r\n            this.range = rangepicker.dates.map(timeValue => {\r\n                const date = new Date(timeValue);\r\n                return isNaN(date) ? undefined : [date.getFullYear(), date.getMonth()];\r\n            });\r\n        }\r\n    }\r\n\r\n    // Update the entire view UI\r\n    render() {\r\n        // refresh disabled months on every render in order to clear the ones added\r\n        // by beforeShow hook at previous render\r\n        this.disabled = [];\r\n\r\n        this.picker.setViewSwitchLabel(this.year);\r\n        this.picker.setPrevBtnDisabled(this.year <= this.minYear);\r\n        this.picker.setNextBtnDisabled(this.year >= this.maxYear);\r\n\r\n        const selected = this.selected[this.year] || [];\r\n        const yrOutOfRange = this.year < this.minYear || this.year > this.maxYear;\r\n        const isMinYear = this.year === this.minYear;\r\n        const isMaxYear = this.year === this.maxYear;\r\n        const range = computeMonthRange(this.range, this.year);\r\n\r\n        Array.from(this.grid.children).forEach((el, index) => {\r\n            const classList = el.classList;\r\n            const date = dateValue(this.year, index, 1);\r\n\r\n            el.className = `datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ${this.cellClass}`;\r\n            if (this.isMinView) {\r\n                el.dataset.date = date;\r\n            }\r\n            // reset text on every render to clear the custom content set\r\n            // by beforeShow hook at previous render\r\n            el.textContent = this.monthNames[index];\r\n\r\n            if (\r\n                yrOutOfRange\r\n                || isMinYear && index < this.minMonth\r\n                || isMaxYear && index > this.maxMonth\r\n            ) {\r\n                classList.add('disabled');\r\n            }\r\n            if (range) {\r\n                const [rangeStart, rangeEnd] = range;\r\n                if (index > rangeStart && index < rangeEnd) {\r\n                    classList.add('range');\r\n                }\r\n                if (index === rangeStart) {\r\n                    classList.add('range-start');\r\n                }\r\n                if (index === rangeEnd) {\r\n                    classList.add('range-end');\r\n                }\r\n            }\r\n            if (selected.includes(index)) {\r\n                classList.add('selected', 'bg-primary-600', 'text-white', 'dark:bg-primary-600', 'dark:text-white');\r\n                classList.remove('text-gray-900', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600');\r\n            }\r\n            if (index === this.focused) {\r\n                classList.add('focused');\r\n            }\r\n\r\n            if (this.beforeShow) {\r\n                this.performBeforeHook(el, index, date);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Update the view UI by applying the changes of selected and focused items\r\n    refresh() {\r\n        const selected = this.selected[this.year] || [];\r\n        const [rangeStart, rangeEnd] = computeMonthRange(this.range, this.year) || [];\r\n        this.grid\r\n            .querySelectorAll('.range, .range-start, .range-end, .selected, .focused')\r\n            .forEach((el) => {\r\n                el.classList.remove('range', 'range-start', 'range-end', 'selected', 'bg-primary-600', 'dark:bg-primary-600', 'dark:text-white', 'text-white', 'focused');\r\n                el.classList.add('text-gray-900', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600');\r\n            });\r\n        Array.from(this.grid.children).forEach((el, index) => {\r\n            const classList = el.classList;\r\n            if (index > rangeStart && index < rangeEnd) {\r\n                classList.add('range');\r\n            }\r\n            if (index === rangeStart) {\r\n                classList.add('range-start');\r\n            }\r\n            if (index === rangeEnd) {\r\n                classList.add('range-end');\r\n            }\r\n            if (selected.includes(index)) {\r\n                classList.add('selected', 'bg-primary-600', 'text-white', 'dark:bg-primary-600', 'dark:text-white');\r\n                classList.remove('text-gray-900', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600');\r\n            }\r\n            if (index === this.focused) {\r\n                classList.add('focused');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Update the view UI by applying the change of focused item\r\n    refreshFocus() {\r\n        this.grid.querySelectorAll('.focused').forEach((el) => {\r\n            el.classList.remove('focused');\r\n        });\r\n        this.grid.children[this.focused].classList.add('focused');\r\n    }\r\n}\r\n\r\nfunction toTitleCase(word) {\r\n    return [...word].reduce((str, ch, ix) => str += ix ? ch : ch.toUpperCase(), '');\r\n}\r\n\r\n// Class representing the years and decades view elements\r\nclass YearsView extends View {\r\n    constructor(picker, config) {\r\n        super(picker, config);\r\n    }\r\n\r\n    init(options, onConstruction = true) {\r\n        if (onConstruction) {\r\n            this.navStep = this.step * 10;\r\n            this.beforeShowOption = `beforeShow${toTitleCase(this.cellClass)}`;\r\n            this.grid = this.element;\r\n            this.element.classList.add(this.name, 'datepicker-grid', 'grid', 'grid-cols-4');\r\n            this.grid.appendChild(parseHTML(createTagRepeat('span', 12)));\r\n        }\r\n        super.init(options);\r\n    }\r\n\r\n    setOptions(options) {\r\n        if (hasProperty(options, 'minDate')) {\r\n            if (options.minDate === undefined) {\r\n                this.minYear = this.minDate = undefined;\r\n            } else {\r\n                this.minYear = startOfYearPeriod(options.minDate, this.step);\r\n                this.minDate = dateValue(this.minYear, 0, 1);\r\n            }\r\n        }\r\n        if (hasProperty(options, 'maxDate')) {\r\n            if (options.maxDate === undefined) {\r\n                this.maxYear = this.maxDate = undefined;\r\n            } else {\r\n                this.maxYear = startOfYearPeriod(options.maxDate, this.step);\r\n                this.maxDate = dateValue(this.maxYear, 11, 31);\r\n            }\r\n        }\r\n        if (options[this.beforeShowOption] !== undefined) {\r\n            const beforeShow = options[this.beforeShowOption];\r\n            this.beforeShow = typeof beforeShow === 'function' ? beforeShow : undefined;\r\n        }\r\n    }\r\n\r\n    // Update view's settings to reflect the viewDate set on the picker\r\n    updateFocus() {\r\n        const viewDate = new Date(this.picker.viewDate);\r\n        const first = startOfYearPeriod(viewDate, this.navStep);\r\n        const last = first + 9 * this.step;\r\n\r\n        this.first = first;\r\n        this.last = last;\r\n        this.start = first - this.step;\r\n        this.focused = startOfYearPeriod(viewDate, this.step);\r\n    }\r\n\r\n    // Update view's settings to reflect the selected dates\r\n    updateSelection() {\r\n        const { dates, rangepicker } = this.picker.datepicker;\r\n        this.selected = dates.reduce((years, timeValue) => {\r\n            return pushUnique(years, startOfYearPeriod(timeValue, this.step));\r\n        }, []);\r\n        if (rangepicker && rangepicker.dates) {\r\n            this.range = rangepicker.dates.map(timeValue => {\r\n                if (timeValue !== undefined) {\r\n                    return startOfYearPeriod(timeValue, this.step);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Update the entire view UI\r\n    render() {\r\n        // refresh disabled years on every render in order to clear the ones added\r\n        // by beforeShow hook at previous render\r\n        this.disabled = [];\r\n\r\n        this.picker.setViewSwitchLabel(`${this.first}-${this.last}`);\r\n        this.picker.setPrevBtnDisabled(this.first <= this.minYear);\r\n        this.picker.setNextBtnDisabled(this.last >= this.maxYear);\r\n\r\n        Array.from(this.grid.children).forEach((el, index) => {\r\n            const classList = el.classList;\r\n            const current = this.start + (index * this.step);\r\n            const date = dateValue(current, 0, 1);\r\n\r\n            el.className = `datepicker-cell hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm ${this.cellClass}`;\r\n            if (this.isMinView) {\r\n                el.dataset.date = date;\r\n            }\r\n            el.textContent = el.dataset.year = current;\r\n\r\n            if (index === 0) {\r\n                classList.add('prev');\r\n            } else if (index === 11) {\r\n                classList.add('next');\r\n            }\r\n            if (current < this.minYear || current > this.maxYear) {\r\n                classList.add('disabled');\r\n            }\r\n            if (this.range) {\r\n                const [rangeStart, rangeEnd] = this.range;\r\n                if (current > rangeStart && current < rangeEnd) {\r\n                    classList.add('range');\r\n                }\r\n                if (current === rangeStart) {\r\n                    classList.add('range-start');\r\n                }\r\n                if (current === rangeEnd) {\r\n                    classList.add('range-end');\r\n                }\r\n            }\r\n            if (this.selected.includes(current)) {\r\n                classList.add('selected', 'bg-primary-600', 'text-white', 'dark:bg-primary-600', 'dark:text-white');\r\n                classList.remove('text-gray-900', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600');\r\n            }\r\n            if (current === this.focused) {\r\n                classList.add('focused');\r\n            }\r\n\r\n            if (this.beforeShow) {\r\n                this.performBeforeHook(el, current, date);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Update the view UI by applying the changes of selected and focused items\r\n    refresh() {\r\n        const [rangeStart, rangeEnd] = this.range || [];\r\n        this.grid\r\n            .querySelectorAll('.range, .range-start, .range-end, .selected, .focused')\r\n            .forEach((el) => {\r\n                el.classList.remove('range', 'range-start', 'range-end', 'selected', 'bg-primary-600', 'text-white', 'dark:bg-primary-600', 'dark:text-white', 'focused');\r\n            });\r\n        Array.from(this.grid.children).forEach((el) => {\r\n            const current = Number(el.textContent);\r\n            const classList = el.classList;\r\n            if (current > rangeStart && current < rangeEnd) {\r\n                classList.add('range');\r\n            }\r\n            if (current === rangeStart) {\r\n                classList.add('range-start');\r\n            }\r\n            if (current === rangeEnd) {\r\n                classList.add('range-end');\r\n            }\r\n            if (this.selected.includes(current)) {\r\n                classList.add('selected', 'bg-primary-600', 'text-white', 'dark:bg-primary-600', 'dark:text-white');\r\n                classList.remove('text-gray-900', 'hover:bg-gray-100', 'dark:text-white', 'dark:hover:bg-gray-600');\r\n            }\r\n            if (current === this.focused) {\r\n                classList.add('focused');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Update the view UI by applying the change of focused item\r\n    refreshFocus() {\r\n        const index = Math.round((this.focused - this.start) / this.step);\r\n        this.grid.querySelectorAll('.focused').forEach((el) => {\r\n            el.classList.remove('focused');\r\n        });\r\n        this.grid.children[index].classList.add('focused');\r\n    }\r\n}\r\n\r\nfunction triggerDatepickerEvent(datepicker, type) {\r\n    const detail = {\r\n        date: datepicker.getDate(),\r\n        viewDate: new Date(datepicker.picker.viewDate),\r\n        viewId: datepicker.picker.currentView.id,\r\n        datepicker,\r\n    };\r\n    datepicker.element.dispatchEvent(new CustomEvent(type, { detail }));\r\n}\r\n\r\n// direction: -1 (to previous), 1 (to next)\r\nfunction goToPrevOrNext(datepicker, direction) {\r\n    const { minDate, maxDate } = datepicker.config;\r\n    const { currentView, viewDate } = datepicker.picker;\r\n    let newViewDate;\r\n    switch (currentView.id) {\r\n        case 0:\r\n            newViewDate = addMonths(viewDate, direction);\r\n            break;\r\n        case 1:\r\n            newViewDate = addYears(viewDate, direction);\r\n            break;\r\n        default:\r\n            newViewDate = addYears(viewDate, direction * currentView.navStep);\r\n    }\r\n    newViewDate = limitToRange(newViewDate, minDate, maxDate);\r\n    datepicker.picker.changeFocus(newViewDate).render();\r\n}\r\n\r\nfunction switchView(datepicker) {\r\n    const viewId = datepicker.picker.currentView.id;\r\n    if (viewId === datepicker.config.maxView) {\r\n        return;\r\n    }\r\n    datepicker.picker.changeView(viewId + 1).render();\r\n}\r\n\r\nfunction unfocus(datepicker) {\r\n    if (datepicker.config.updateOnBlur) {\r\n        datepicker.update({ autohide: true });\r\n    } else {\r\n        datepicker.refresh('input');\r\n        datepicker.hide();\r\n    }\r\n}\r\n\r\nfunction goToSelectedMonthOrYear(datepicker, selection) {\r\n    const picker = datepicker.picker;\r\n    const viewDate = new Date(picker.viewDate);\r\n    const viewId = picker.currentView.id;\r\n    const newDate = viewId === 1\r\n        ? addMonths(viewDate, selection - viewDate.getMonth())\r\n        : addYears(viewDate, selection - viewDate.getFullYear());\r\n\r\n    picker.changeFocus(newDate).changeView(viewId - 1).render();\r\n}\r\n\r\nfunction onClickTodayBtn(datepicker) {\r\n    const picker = datepicker.picker;\r\n    const currentDate = today();\r\n    if (datepicker.config.todayBtnMode === 1) {\r\n        if (datepicker.config.autohide) {\r\n            datepicker.setDate(currentDate);\r\n            return;\r\n        }\r\n        datepicker.setDate(currentDate, { render: false });\r\n        picker.update();\r\n    }\r\n    if (picker.viewDate !== currentDate) {\r\n        picker.changeFocus(currentDate);\r\n    }\r\n    picker.changeView(0).render();\r\n}\r\n\r\nfunction onClickClearBtn(datepicker) {\r\n    datepicker.setDate({ clear: true });\r\n}\r\n\r\nfunction onClickViewSwitch(datepicker) {\r\n    switchView(datepicker);\r\n}\r\n\r\nfunction onClickPrevBtn(datepicker) {\r\n    goToPrevOrNext(datepicker, -1);\r\n}\r\n\r\nfunction onClickNextBtn(datepicker) {\r\n    goToPrevOrNext(datepicker, 1);\r\n}\r\n\r\n// For the picker's main block to delegete the events from `datepicker-cell`s\r\nfunction onClickView(datepicker, ev) {\r\n    const target = findElementInEventPath(ev, '.datepicker-cell');\r\n    if (!target || target.classList.contains('disabled')) {\r\n        return;\r\n    }\r\n\r\n    const { id, isMinView } = datepicker.picker.currentView;\r\n    if (isMinView) {\r\n        datepicker.setDate(Number(target.dataset.date));\r\n    } else if (id === 1) {\r\n        goToSelectedMonthOrYear(datepicker, Number(target.dataset.month));\r\n    } else {\r\n        goToSelectedMonthOrYear(datepicker, Number(target.dataset.year));\r\n    }\r\n}\r\n\r\nfunction onClickPicker(datepicker) {\r\n    if (!datepicker.inline && !datepicker.config.disableTouchKeyboard) {\r\n        datepicker.inputField.focus();\r\n    }\r\n}\r\n\r\nfunction processPickerOptions(picker, options) {\r\n    if (options.title !== undefined) {\r\n        if (options.title) {\r\n            picker.controls.title.textContent = options.title;\r\n            showElement(picker.controls.title);\r\n        } else {\r\n            picker.controls.title.textContent = '';\r\n            hideElement(picker.controls.title);\r\n        }\r\n    }\r\n    if (options.prevArrow) {\r\n        const prevBtn = picker.controls.prevBtn;\r\n        emptyChildNodes(prevBtn);\r\n        options.prevArrow.forEach((node) => {\r\n            prevBtn.appendChild(node.cloneNode(true));\r\n        });\r\n    }\r\n    if (options.nextArrow) {\r\n        const nextBtn = picker.controls.nextBtn;\r\n        emptyChildNodes(nextBtn);\r\n        options.nextArrow.forEach((node) => {\r\n            nextBtn.appendChild(node.cloneNode(true));\r\n        });\r\n    }\r\n    if (options.locale) {\r\n        picker.controls.todayBtn.textContent = options.locale.today;\r\n        picker.controls.clearBtn.textContent = options.locale.clear;\r\n    }\r\n    if (options.todayBtn !== undefined) {\r\n        if (options.todayBtn) {\r\n            showElement(picker.controls.todayBtn);\r\n        } else {\r\n            hideElement(picker.controls.todayBtn);\r\n        }\r\n    }\r\n    if (hasProperty(options, 'minDate') || hasProperty(options, 'maxDate')) {\r\n        const { minDate, maxDate } = picker.datepicker.config;\r\n        picker.controls.todayBtn.disabled = !isInRange(today(), minDate, maxDate);\r\n    }\r\n    if (options.clearBtn !== undefined) {\r\n        if (options.clearBtn) {\r\n            showElement(picker.controls.clearBtn);\r\n        } else {\r\n            hideElement(picker.controls.clearBtn);\r\n        }\r\n    }\r\n}\r\n\r\n// Compute view date to reset, which will be...\r\n// - the last item of the selected dates or defaultViewDate if no selection\r\n// - limitted to minDate or maxDate if it exceeds the range\r\nfunction computeResetViewDate(datepicker) {\r\n    const { dates, config } = datepicker;\r\n    const viewDate = dates.length > 0 ? lastItemOf(dates) : config.defaultViewDate;\r\n    return limitToRange(viewDate, config.minDate, config.maxDate);\r\n}\r\n\r\n// Change current view's view date\r\nfunction setViewDate(picker, newDate) {\r\n    const oldViewDate = new Date(picker.viewDate);\r\n    const newViewDate = new Date(newDate);\r\n    const { id, year, first, last } = picker.currentView;\r\n    const viewYear = newViewDate.getFullYear();\r\n\r\n    picker.viewDate = newDate;\r\n    if (viewYear !== oldViewDate.getFullYear()) {\r\n        triggerDatepickerEvent(picker.datepicker, 'changeYear');\r\n    }\r\n    if (newViewDate.getMonth() !== oldViewDate.getMonth()) {\r\n        triggerDatepickerEvent(picker.datepicker, 'changeMonth');\r\n    }\r\n\r\n    // return whether the new date is in different period on time from the one\r\n    // displayed in the current view\r\n    // when true, the view needs to be re-rendered on the next UI refresh.\r\n    switch (id) {\r\n        case 0:\r\n            return newDate < first || newDate > last;\r\n        case 1:\r\n            return viewYear !== year;\r\n        default:\r\n            return viewYear < first || viewYear > last;\r\n    }\r\n}\r\n\r\nfunction getTextDirection(el) {\r\n    return window.getComputedStyle(el).direction;\r\n}\r\n\r\n// Class representing the picker UI\r\nclass Picker {\r\n    constructor(datepicker) {\r\n        this.datepicker = datepicker;\r\n\r\n        const template = pickerTemplate.replace(/%buttonClass%/g, datepicker.config.buttonClass);\r\n        const element = this.element = parseHTML(template).firstChild;\r\n        const [header, main, footer] = element.firstChild.children;\r\n        const title = header.firstElementChild;\r\n        const [prevBtn, viewSwitch, nextBtn] = header.lastElementChild.children;\r\n        const [todayBtn, clearBtn] = footer.firstChild.children;\r\n        const controls = {\r\n            title,\r\n            prevBtn,\r\n            viewSwitch,\r\n            nextBtn,\r\n            todayBtn,\r\n            clearBtn,\r\n        };\r\n        this.main = main;\r\n        this.controls = controls;\r\n\r\n        const elementClass = datepicker.inline ? 'inline' : 'dropdown';\r\n        element.classList.add(`datepicker-${elementClass}`);\r\n        elementClass === 'dropdown' ? element.classList.add('dropdown', 'absolute', 'top-0', 'left-0', 'z-50', 'pt-2') : null;\r\n\r\n        processPickerOptions(this, datepicker.config);\r\n        this.viewDate = computeResetViewDate(datepicker);\r\n\r\n        // set up event listeners\r\n        registerListeners(datepicker, [\r\n            [element, 'click', onClickPicker.bind(null, datepicker), { capture: true }],\r\n            [main, 'click', onClickView.bind(null, datepicker)],\r\n            [controls.viewSwitch, 'click', onClickViewSwitch.bind(null, datepicker)],\r\n            [controls.prevBtn, 'click', onClickPrevBtn.bind(null, datepicker)],\r\n            [controls.nextBtn, 'click', onClickNextBtn.bind(null, datepicker)],\r\n            [controls.todayBtn, 'click', onClickTodayBtn.bind(null, datepicker)],\r\n            [controls.clearBtn, 'click', onClickClearBtn.bind(null, datepicker)],\r\n        ]);\r\n\r\n        // set up views\r\n        this.views = [\r\n            new DaysView(this),\r\n            new MonthsView(this),\r\n            new YearsView(this, { id: 2, name: 'years', cellClass: 'year', step: 1 }),\r\n            new YearsView(this, { id: 3, name: 'decades', cellClass: 'decade', step: 10 }),\r\n        ];\r\n        this.currentView = this.views[datepicker.config.startView];\r\n\r\n        this.currentView.render();\r\n        this.main.appendChild(this.currentView.element);\r\n        datepicker.config.container.appendChild(this.element);\r\n    }\r\n\r\n    setOptions(options) {\r\n        processPickerOptions(this, options);\r\n        this.views.forEach((view) => {\r\n            view.init(options, false);\r\n        });\r\n        this.currentView.render();\r\n    }\r\n\r\n    detach() {\r\n        this.datepicker.config.container.removeChild(this.element);\r\n    }\r\n\r\n    show() {\r\n        if (this.active) {\r\n            return;\r\n        }\r\n        this.element.classList.add('active', 'block');\r\n        this.element.classList.remove('hidden');\r\n        this.active = true;\r\n\r\n        const datepicker = this.datepicker;\r\n        if (!datepicker.inline) {\r\n            // ensure picker's direction matches input's\r\n            const inputDirection = getTextDirection(datepicker.inputField);\r\n            if (inputDirection !== getTextDirection(datepicker.config.container)) {\r\n                this.element.dir = inputDirection;\r\n            } else if (this.element.dir) {\r\n                this.element.removeAttribute('dir');\r\n            }\r\n\r\n            this.place();\r\n            if (datepicker.config.disableTouchKeyboard) {\r\n                datepicker.inputField.blur();\r\n            }\r\n        }\r\n        triggerDatepickerEvent(datepicker, 'show');\r\n    }\r\n\r\n    hide() {\r\n        if (!this.active) {\r\n            return;\r\n        }\r\n        this.datepicker.exitEditMode();\r\n        this.element.classList.remove('active', 'block');\r\n        this.element.classList.add('active', 'block', 'hidden');\r\n        this.active = false;\r\n        triggerDatepickerEvent(this.datepicker, 'hide');\r\n    }\r\n\r\n    place() {\r\n        const { classList, style } = this.element;\r\n        const { config, inputField } = this.datepicker;\r\n        const container = config.container;\r\n        const {\r\n            width: calendarWidth,\r\n            height: calendarHeight,\r\n        } = this.element.getBoundingClientRect();\r\n        const {\r\n            left: containerLeft,\r\n            top: containerTop,\r\n            width: containerWidth,\r\n        } = container.getBoundingClientRect();\r\n        const {\r\n            left: inputLeft,\r\n            top: inputTop,\r\n            width: inputWidth,\r\n            height: inputHeight\r\n        } = inputField.getBoundingClientRect();\r\n        let { x: orientX, y: orientY } = config.orientation;\r\n        let scrollTop;\r\n        let left;\r\n        let top;\r\n\r\n        if (container === document.body) {\r\n            scrollTop = window.scrollY;\r\n            left = inputLeft + window.scrollX;\r\n            top = inputTop + scrollTop;\r\n        } else {\r\n            scrollTop = container.scrollTop;\r\n            left = inputLeft - containerLeft;\r\n            top = inputTop - containerTop + scrollTop;\r\n        }\r\n\r\n        if (orientX === 'auto') {\r\n            if (left < 0) {\r\n                // align to the left and move into visible area if input's left edge < window's\r\n                orientX = 'left';\r\n                left = 10;\r\n            } else if (left + calendarWidth > containerWidth) {\r\n                // align to the right if canlendar's right edge > container's\r\n                orientX = 'right';\r\n            } else {\r\n                orientX = getTextDirection(inputField) === 'rtl' ? 'right' : 'left';\r\n            }\r\n        }\r\n        if (orientX === 'right') {\r\n            left -= calendarWidth - inputWidth;\r\n        }\r\n\r\n        if (orientY === 'auto') {\r\n            orientY = top - calendarHeight < scrollTop ? 'bottom' : 'top';\r\n        }\r\n        if (orientY === 'top') {\r\n            top -= calendarHeight;\r\n        } else {\r\n            top += inputHeight;\r\n        }\r\n\r\n        classList.remove(\r\n            'datepicker-orient-top',\r\n            'datepicker-orient-bottom',\r\n            'datepicker-orient-right',\r\n            'datepicker-orient-left'\r\n        );\r\n        classList.add(`datepicker-orient-${orientY}`, `datepicker-orient-${orientX}`);\r\n\r\n        style.top = top ? `${top}px` : top;\r\n        style.left = left ? `${left}px` : left;\r\n    }\r\n\r\n    setViewSwitchLabel(labelText) {\r\n        this.controls.viewSwitch.textContent = labelText;\r\n    }\r\n\r\n    setPrevBtnDisabled(disabled) {\r\n        this.controls.prevBtn.disabled = disabled;\r\n    }\r\n\r\n    setNextBtnDisabled(disabled) {\r\n        this.controls.nextBtn.disabled = disabled;\r\n    }\r\n\r\n    changeView(viewId) {\r\n        const oldView = this.currentView;\r\n        const newView = this.views[viewId];\r\n        if (newView.id !== oldView.id) {\r\n            this.currentView = newView;\r\n            this._renderMethod = 'render';\r\n            triggerDatepickerEvent(this.datepicker, 'changeView');\r\n            this.main.replaceChild(newView.element, oldView.element);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // Change the focused date (view date)\r\n    changeFocus(newViewDate) {\r\n        this._renderMethod = setViewDate(this, newViewDate) ? 'render' : 'refreshFocus';\r\n        this.views.forEach((view) => {\r\n            view.updateFocus();\r\n        });\r\n        return this;\r\n    }\r\n\r\n    // Apply the change of the selected dates\r\n    update() {\r\n        const newViewDate = computeResetViewDate(this.datepicker);\r\n        this._renderMethod = setViewDate(this, newViewDate) ? 'render' : 'refresh';\r\n        this.views.forEach((view) => {\r\n            view.updateFocus();\r\n            view.updateSelection();\r\n        });\r\n        return this;\r\n    }\r\n\r\n    // Refresh the picker UI\r\n    render(quickRender = true) {\r\n        const renderMethod = (quickRender && this._renderMethod) || 'render';\r\n        delete this._renderMethod;\r\n\r\n        this.currentView[renderMethod]();\r\n    }\r\n}\r\n\r\n// Find the closest date that doesn't meet the condition for unavailable date\r\n// Returns undefined if no available date is found\r\n// addFn: function to calculate the next date\r\n//   - args: time value, amount\r\n// increase: amount to pass to addFn\r\n// testFn: function to test the unavailablity of the date\r\n//   - args: time value; retun: true if unavailable\r\nfunction findNextAvailableOne(date, addFn, increase, testFn, min, max) {\r\n    if (!isInRange(date, min, max)) {\r\n        return;\r\n    }\r\n    if (testFn(date)) {\r\n        const newDate = addFn(date, increase);\r\n        return findNextAvailableOne(newDate, addFn, increase, testFn, min, max);\r\n    }\r\n    return date;\r\n}\r\n\r\n// direction: -1 (left/up), 1 (right/down)\r\n// vertical: true for up/down, false for left/right\r\nfunction moveByArrowKey(datepicker, ev, direction, vertical) {\r\n    const picker = datepicker.picker;\r\n    const currentView = picker.currentView;\r\n    const step = currentView.step || 1;\r\n    let viewDate = picker.viewDate;\r\n    let addFn;\r\n    let testFn;\r\n    switch (currentView.id) {\r\n        case 0:\r\n            if (vertical) {\r\n                viewDate = addDays(viewDate, direction * 7);\r\n            } else if (ev.ctrlKey || ev.metaKey) {\r\n                viewDate = addYears(viewDate, direction);\r\n            } else {\r\n                viewDate = addDays(viewDate, direction);\r\n            }\r\n            addFn = addDays;\r\n            testFn = (date) => currentView.disabled.includes(date);\r\n            break;\r\n        case 1:\r\n            viewDate = addMonths(viewDate, vertical ? direction * 4 : direction);\r\n            addFn = addMonths;\r\n            testFn = (date) => {\r\n                const dt = new Date(date);\r\n                const { year, disabled } = currentView;\r\n                return dt.getFullYear() === year && disabled.includes(dt.getMonth());\r\n            };\r\n            break;\r\n        default:\r\n            viewDate = addYears(viewDate, direction * (vertical ? 4 : 1) * step);\r\n            addFn = addYears;\r\n            testFn = date => currentView.disabled.includes(startOfYearPeriod(date, step));\r\n    }\r\n    viewDate = findNextAvailableOne(\r\n        viewDate,\r\n        addFn,\r\n        direction < 0 ? -step : step,\r\n        testFn,\r\n        currentView.minDate,\r\n        currentView.maxDate\r\n    );\r\n    if (viewDate !== undefined) {\r\n        picker.changeFocus(viewDate).render();\r\n    }\r\n}\r\n\r\nfunction onKeydown(datepicker, ev) {\r\n    if (ev.key === 'Tab') {\r\n        unfocus(datepicker);\r\n        return;\r\n    }\r\n\r\n    const picker = datepicker.picker;\r\n    const { id, isMinView } = picker.currentView;\r\n    if (!picker.active) {\r\n        switch (ev.key) {\r\n            case 'ArrowDown':\r\n            case 'Escape':\r\n                picker.show();\r\n                break;\r\n            case 'Enter':\r\n                datepicker.update();\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    } else if (datepicker.editMode) {\r\n        switch (ev.key) {\r\n            case 'Escape':\r\n                picker.hide();\r\n                break;\r\n            case 'Enter':\r\n                datepicker.exitEditMode({ update: true, autohide: datepicker.config.autohide });\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    } else {\r\n        switch (ev.key) {\r\n            case 'Escape':\r\n                picker.hide();\r\n                break;\r\n            case 'ArrowLeft':\r\n                if (ev.ctrlKey || ev.metaKey) {\r\n                    goToPrevOrNext(datepicker, -1);\r\n                } else if (ev.shiftKey) {\r\n                    datepicker.enterEditMode();\r\n                    return;\r\n                } else {\r\n                    moveByArrowKey(datepicker, ev, -1, false);\r\n                }\r\n                break;\r\n            case 'ArrowRight':\r\n                if (ev.ctrlKey || ev.metaKey) {\r\n                    goToPrevOrNext(datepicker, 1);\r\n                } else if (ev.shiftKey) {\r\n                    datepicker.enterEditMode();\r\n                    return;\r\n                } else {\r\n                    moveByArrowKey(datepicker, ev, 1, false);\r\n                }\r\n                break;\r\n            case 'ArrowUp':\r\n                if (ev.ctrlKey || ev.metaKey) {\r\n                    switchView(datepicker);\r\n                } else if (ev.shiftKey) {\r\n                    datepicker.enterEditMode();\r\n                    return;\r\n                } else {\r\n                    moveByArrowKey(datepicker, ev, -1, true);\r\n                }\r\n                break;\r\n            case 'ArrowDown':\r\n                if (ev.shiftKey && !ev.ctrlKey && !ev.metaKey) {\r\n                    datepicker.enterEditMode();\r\n                    return;\r\n                }\r\n                moveByArrowKey(datepicker, ev, 1, true);\r\n                break;\r\n            case 'Enter':\r\n                if (isMinView) {\r\n                    datepicker.setDate(picker.viewDate);\r\n                } else {\r\n                    picker.changeView(id - 1).render();\r\n                }\r\n                break;\r\n            case 'Backspace':\r\n            case 'Delete':\r\n                datepicker.enterEditMode();\r\n                return;\r\n            default:\r\n                if (ev.key.length === 1 && !ev.ctrlKey && !ev.metaKey) {\r\n                    datepicker.enterEditMode();\r\n                }\r\n                return;\r\n        }\r\n    }\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n}\r\n\r\nfunction onFocus(datepicker) {\r\n    if (datepicker.config.showOnFocus && !datepicker._showing) {\r\n        datepicker.show();\r\n    }\r\n}\r\n\r\n// for the prevention for entering edit mode while getting focus on click\r\nfunction onMousedown(datepicker, ev) {\r\n    const el = ev.target;\r\n    if (datepicker.picker.active || datepicker.config.showOnClick) {\r\n        el._active = el === document.activeElement;\r\n        el._clicking = setTimeout(() => {\r\n            delete el._active;\r\n            delete el._clicking;\r\n        }, 2000);\r\n    }\r\n}\r\n\r\nfunction onClickInput(datepicker, ev) {\r\n    const el = ev.target;\r\n    if (!el._clicking) {\r\n        return;\r\n    }\r\n    clearTimeout(el._clicking);\r\n    delete el._clicking;\r\n\r\n    if (el._active) {\r\n        datepicker.enterEditMode();\r\n    }\r\n    delete el._active;\r\n\r\n    if (datepicker.config.showOnClick) {\r\n        datepicker.show();\r\n    }\r\n}\r\n\r\nfunction onPaste(datepicker, ev) {\r\n    if (ev.clipboardData.types.includes('text/plain')) {\r\n        datepicker.enterEditMode();\r\n    }\r\n}\r\n\r\n// for the `document` to delegate the events from outside the picker/input field\r\nfunction onClickOutside(datepicker, ev) {\r\n    const element = datepicker.element;\r\n    if (element !== document.activeElement) {\r\n        return;\r\n    }\r\n    const pickerElem = datepicker.picker.element;\r\n    if (findElementInEventPath(ev, el => el === element || el === pickerElem)) {\r\n        return;\r\n    }\r\n    unfocus(datepicker);\r\n}\r\n\r\nfunction stringifyDates(dates, config) {\r\n    return dates\r\n        .map(dt => formatDate(dt, config.format, config.locale))\r\n        .join(config.dateDelimiter);\r\n}\r\n\r\n// parse input dates and create an array of time values for selection\r\n// returns undefined if there are no valid dates in inputDates\r\n// when origDates (current selection) is passed, the function works to mix\r\n// the input dates into the current selection\r\nfunction processInputDates(datepicker, inputDates, clear = false) {\r\n    const { config, dates: origDates, rangepicker } = datepicker;\r\n    if (inputDates.length === 0) {\r\n        // empty input is considered valid unless origiDates is passed\r\n        return clear ? [] : undefined;\r\n    }\r\n\r\n    const rangeEnd = rangepicker && datepicker === rangepicker.datepickers[1];\r\n    let newDates = inputDates.reduce((dates, dt) => {\r\n        let date = parseDate(dt, config.format, config.locale);\r\n        if (date === undefined) {\r\n            return dates;\r\n        }\r\n        if (config.pickLevel > 0) {\r\n            // adjust to 1st of the month/Jan 1st of the year\r\n            // or to the last day of the monh/Dec 31st of the year if the datepicker\r\n            // is the range-end picker of a rangepicker\r\n            const dt = new Date(date);\r\n            if (config.pickLevel === 1) {\r\n                date = rangeEnd\r\n                    ? dt.setMonth(dt.getMonth() + 1, 0)\r\n                    : dt.setDate(1);\r\n            } else {\r\n                date = rangeEnd\r\n                    ? dt.setFullYear(dt.getFullYear() + 1, 0, 0)\r\n                    : dt.setMonth(0, 1);\r\n            }\r\n        }\r\n        if (\r\n            isInRange(date, config.minDate, config.maxDate)\r\n            && !dates.includes(date)\r\n            && !config.datesDisabled.includes(date)\r\n            && !config.daysOfWeekDisabled.includes(new Date(date).getDay())\r\n        ) {\r\n            dates.push(date);\r\n        }\r\n        return dates;\r\n    }, []);\r\n    if (newDates.length === 0) {\r\n        return;\r\n    }\r\n    if (config.multidate && !clear) {\r\n        // get the synmetric difference between origDates and newDates\r\n        newDates = newDates.reduce((dates, date) => {\r\n            if (!origDates.includes(date)) {\r\n                dates.push(date);\r\n            }\r\n            return dates;\r\n        }, origDates.filter(date => !newDates.includes(date)));\r\n    }\r\n    // do length check always because user can input multiple dates regardless of the mode\r\n    return config.maxNumberOfDates && newDates.length > config.maxNumberOfDates\r\n        ? newDates.slice(config.maxNumberOfDates * -1)\r\n        : newDates;\r\n}\r\n\r\n// refresh the UI elements\r\n// modes: 1: input only, 2, picker only, 3 both\r\nfunction refreshUI(datepicker, mode = 3, quickRender = true) {\r\n    const { config, picker, inputField } = datepicker;\r\n    if (mode & 2) {\r\n        const newView = picker.active ? config.pickLevel : config.startView;\r\n        picker.update().changeView(newView).render(quickRender);\r\n    }\r\n    if (mode & 1 && inputField) {\r\n        inputField.value = stringifyDates(datepicker.dates, config);\r\n    }\r\n}\r\n\r\nfunction setDate(datepicker, inputDates, options) {\r\n    let { clear, render, autohide } = options;\r\n    if (render === undefined) {\r\n        render = true;\r\n    }\r\n    if (!render) {\r\n        autohide = false;\r\n    } else if (autohide === undefined) {\r\n        autohide = datepicker.config.autohide;\r\n    }\r\n\r\n    const newDates = processInputDates(datepicker, inputDates, clear);\r\n    if (!newDates) {\r\n        return;\r\n    }\r\n    if (newDates.toString() !== datepicker.dates.toString()) {\r\n        datepicker.dates = newDates;\r\n        refreshUI(datepicker, render ? 3 : 1);\r\n        triggerDatepickerEvent(datepicker, 'changeDate');\r\n    } else {\r\n        refreshUI(datepicker, 1);\r\n    }\r\n    datepicker.hide();\r\n}\r\n\r\n/**\r\n * Class representing a date picker\r\n */\r\nclass Datepicker {\r\n    /**\r\n     * Create a date picker\r\n     * @param  {Element} element - element to bind a date picker\r\n     * @param  {Object} [options] - config options\r\n     * @param  {DateRangePicker} [rangepicker] - DateRangePicker instance the\r\n     * date picker belongs to. Use this only when creating date picker as a part\r\n     * of date range picker\r\n     */\r\n    constructor(element, options = {}, rangepicker = undefined) {\r\n        element.datepicker = this;\r\n        this.element = element;\r\n\r\n        // set up config\r\n        const config = this.config = Object.assign({\r\n            buttonClass: (options.buttonClass && String(options.buttonClass)) || 'button',\r\n            container: document.body,\r\n            defaultViewDate: today(),\r\n            maxDate: undefined,\r\n            minDate: undefined,\r\n        }, processOptions(defaultOptions, this));\r\n        this._options = options;\r\n        Object.assign(config, processOptions(options, this));\r\n\r\n        // configure by type\r\n        const inline = this.inline = element.tagName !== 'INPUT';\r\n        let inputField;\r\n        let initialDates;\r\n\r\n        if (inline) {\r\n            config.container = element;\r\n            initialDates = stringToArray(element.dataset.date, config.dateDelimiter);\r\n            delete element.dataset.date;\r\n        } else {\r\n            const container = options.container ? document.querySelector(options.container) : null;\r\n            if (container) {\r\n                config.container = container;\r\n            }\r\n            inputField = this.inputField = element;\r\n            inputField.classList.add('datepicker-input');\r\n            initialDates = stringToArray(inputField.value, config.dateDelimiter);\r\n        }\r\n        if (rangepicker) {\r\n            // check validiry\r\n            const index = rangepicker.inputs.indexOf(inputField);\r\n            const datepickers = rangepicker.datepickers;\r\n            if (index < 0 || index > 1 || !Array.isArray(datepickers)) {\r\n                throw Error('Invalid rangepicker object.');\r\n            }\r\n            // attach itaelf to the rangepicker here so that processInputDates() can\r\n            // determine if this is the range-end picker of the rangepicker while\r\n            // setting inital values when pickLevel > 0\r\n            datepickers[index] = this;\r\n            // add getter for rangepicker\r\n            Object.defineProperty(this, 'rangepicker', {\r\n                get() {\r\n                    return rangepicker;\r\n                },\r\n            });\r\n        }\r\n\r\n        // set initial dates\r\n        this.dates = [];\r\n        // process initial value\r\n        const inputDateValues = processInputDates(this, initialDates);\r\n        if (inputDateValues && inputDateValues.length > 0) {\r\n            this.dates = inputDateValues;\r\n        }\r\n        if (inputField) {\r\n            inputField.value = stringifyDates(this.dates, config);\r\n        }\r\n\r\n        const picker = this.picker = new Picker(this);\r\n\r\n        if (inline) {\r\n            this.show();\r\n        } else {\r\n            // set up event listeners in other modes\r\n            const onMousedownDocument = onClickOutside.bind(null, this);\r\n            const listeners = [\r\n                [inputField, 'keydown', onKeydown.bind(null, this)],\r\n                [inputField, 'focus', onFocus.bind(null, this)],\r\n                [inputField, 'mousedown', onMousedown.bind(null, this)],\r\n                [inputField, 'click', onClickInput.bind(null, this)],\r\n                [inputField, 'paste', onPaste.bind(null, this)],\r\n                [document, 'mousedown', onMousedownDocument],\r\n                [document, 'touchstart', onMousedownDocument],\r\n                [window, 'resize', picker.place.bind(picker)]\r\n            ];\r\n            registerListeners(this, listeners);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Format Date object or time value in given format and language\r\n     * @param  {Date|Number} date - date or time value to format\r\n     * @param  {String|Object} format - format string or object that contains\r\n     * toDisplay() custom formatter, whose signature is\r\n     * - args:\r\n     *   - date: {Date} - Date instance of the date passed to the method\r\n     *   - format: {Object} - the format object passed to the method\r\n     *   - locale: {Object} - locale for the language specified by `lang`\r\n     * - return:\r\n     *     {String} formatted date\r\n     * @param  {String} [lang=en] - language code for the locale to use\r\n     * @return {String} formatted date\r\n     */\r\n    static formatDate(date, format, lang) {\r\n        return formatDate(date, format, lang && locales[lang] || locales.en);\r\n    }\r\n\r\n    /**\r\n     * Parse date string\r\n     * @param  {String|Date|Number} dateStr - date string, Date object or time\r\n     * value to parse\r\n     * @param  {String|Object} format - format string or object that contains\r\n     * toValue() custom parser, whose signature is\r\n     * - args:\r\n     *   - dateStr: {String|Date|Number} - the dateStr passed to the method\r\n     *   - format: {Object} - the format object passed to the method\r\n     *   - locale: {Object} - locale for the language specified by `lang`\r\n     * - return:\r\n     *     {Date|Number} parsed date or its time value\r\n     * @param  {String} [lang=en] - language code for the locale to use\r\n     * @return {Number} time value of parsed date\r\n     */\r\n    static parseDate(dateStr, format, lang) {\r\n        return parseDate(dateStr, format, lang && locales[lang] || locales.en);\r\n    }\r\n\r\n    /**\r\n     * @type {Object} - Installed locales in `[languageCode]: localeObject` format\r\n     * en`:_English (US)_ is pre-installed.\r\n     */\r\n    static get locales() {\r\n        return locales;\r\n    }\r\n\r\n    /**\r\n     * @type {Boolean} - Whether the picker element is shown. `true` whne shown\r\n     */\r\n    get active() {\r\n        return !!(this.picker && this.picker.active);\r\n    }\r\n\r\n    /**\r\n     * @type {HTMLDivElement} - DOM object of picker element\r\n     */\r\n    get pickerElement() {\r\n        return this.picker ? this.picker.element : undefined;\r\n    }\r\n\r\n    /**\r\n     * Set new values to the config options\r\n     * @param {Object} options - config options to update\r\n     */\r\n    setOptions(options) {\r\n        const picker = this.picker;\r\n        const newOptions = processOptions(options, this);\r\n        Object.assign(this._options, options);\r\n        Object.assign(this.config, newOptions);\r\n        picker.setOptions(newOptions);\r\n\r\n        refreshUI(this, 3);\r\n    }\r\n\r\n    /**\r\n     * Show the picker element\r\n     */\r\n    show() {\r\n        if (this.inputField) {\r\n            if (this.inputField.disabled) {\r\n                return;\r\n            }\r\n            if (this.inputField !== document.activeElement) {\r\n                this._showing = true;\r\n                this.inputField.focus();\r\n                delete this._showing;\r\n            }\r\n        }\r\n        this.picker.show();\r\n    }\r\n\r\n    /**\r\n     * Hide the picker element\r\n     * Not available on inline picker\r\n     */\r\n    hide() {\r\n        if (this.inline) {\r\n            return;\r\n        }\r\n        this.picker.hide();\r\n        this.picker.update().changeView(this.config.startView).render();\r\n    }\r\n\r\n    /**\r\n     * Destroy the Datepicker instance\r\n     * @return {Detepicker} - the instance destroyed\r\n     */\r\n    destroy() {\r\n        this.hide();\r\n        unregisterListeners(this);\r\n        this.picker.detach();\r\n        if (!this.inline) {\r\n            this.inputField.classList.remove('datepicker-input');\r\n        }\r\n        delete this.element.datepicker;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get the selected date(s)\r\n     *\r\n     * The method returns a Date object of selected date by default, and returns\r\n     * an array of selected dates in multidate mode. If format string is passed,\r\n     * it returns date string(s) formatted in given format.\r\n     *\r\n     * @param  {String} [format] - Format string to stringify the date(s)\r\n     * @return {Date|String|Date[]|String[]} - selected date(s), or if none is\r\n     * selected, empty array in multidate mode and untitled in sigledate mode\r\n     */\r\n    getDate(format = undefined) {\r\n        const callback = format\r\n            ? date => formatDate(date, format, this.config.locale)\r\n            : date => new Date(date);\r\n\r\n        if (this.config.multidate) {\r\n            return this.dates.map(callback);\r\n        }\r\n        if (this.dates.length > 0) {\r\n            return callback(this.dates[0]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set selected date(s)\r\n     *\r\n     * In multidate mode, you can pass multiple dates as a series of arguments\r\n     * or an array. (Since each date is parsed individually, the type of the\r\n     * dates doesn't have to be the same.)\r\n     * The given dates are used to toggle the select status of each date. The\r\n     * number of selected dates is kept from exceeding the length set to\r\n     * maxNumberOfDates.\r\n     *\r\n     * With clear: true option, the method can be used to clear the selection\r\n     * and to replace the selection instead of toggling in multidate mode.\r\n     * If the option is passed with no date arguments or an empty dates array,\r\n     * it works as \"clear\" (clear the selection then set nothing), and if the\r\n     * option is passed with new dates to select, it works as \"replace\" (clear\r\n     * the selection then set the given dates)\r\n     *\r\n     * When render: false option is used, the method omits re-rendering the\r\n     * picker element. In this case, you need to call refresh() method later in\r\n     * order for the picker element to reflect the changes. The input field is\r\n     * refreshed always regardless of this option.\r\n     *\r\n     * When invalid (unparsable, repeated, disabled or out-of-range) dates are\r\n     * passed, the method ignores them and applies only valid ones. In the case\r\n     * that all the given dates are invalid, which is distinguished from passing\r\n     * no dates, the method considers it as an error and leaves the selection\r\n     * untouched.\r\n     *\r\n     * @param {...(Date|Number|String)|Array} [dates] - Date strings, Date\r\n     * objects, time values or mix of those for new selection\r\n     * @param {Object} [options] - function options\r\n     * - clear: {boolean} - Whether to clear the existing selection\r\n     *     defualt: false\r\n     * - render: {boolean} - Whether to re-render the picker element\r\n     *     default: true\r\n     * - autohide: {boolean} - Whether to hide the picker element after re-render\r\n     *     Ignored when used with render: false\r\n     *     default: config.autohide\r\n     */\r\n    setDate(...args) {\r\n        const dates = [...args];\r\n        const opts = {};\r\n        const lastArg = lastItemOf(args);\r\n        if (\r\n            typeof lastArg === 'object'\r\n            && !Array.isArray(lastArg)\r\n            && !(lastArg instanceof Date)\r\n            && lastArg\r\n        ) {\r\n            Object.assign(opts, dates.pop());\r\n        }\r\n\r\n        const inputDates = Array.isArray(dates[0]) ? dates[0] : dates;\r\n        setDate(this, inputDates, opts);\r\n    }\r\n\r\n    /**\r\n     * Update the selected date(s) with input field's value\r\n     * Not available on inline picker\r\n     *\r\n     * The input field will be refreshed with properly formatted date string.\r\n     *\r\n     * @param  {Object} [options] - function options\r\n     * - autohide: {boolean} - whether to hide the picker element after refresh\r\n     *     default: false\r\n     */\r\n    update(options = undefined) {\r\n        if (this.inline) {\r\n            return;\r\n        }\r\n\r\n        const opts = { clear: true, autohide: !!(options && options.autohide) };\r\n        const inputDates = stringToArray(this.inputField.value, this.config.dateDelimiter);\r\n        setDate(this, inputDates, opts);\r\n    }\r\n\r\n    /**\r\n     * Refresh the picker element and the associated input field\r\n     * @param {String} [target] - target item when refreshing one item only\r\n     * 'picker' or 'input'\r\n     * @param {Boolean} [forceRender] - whether to re-render the picker element\r\n     * regardless of its state instead of optimized refresh\r\n     */\r\n    refresh(target = undefined, forceRender = false) {\r\n        if (target && typeof target !== 'string') {\r\n            forceRender = target;\r\n            target = undefined;\r\n        }\r\n\r\n        let mode;\r\n        if (target === 'picker') {\r\n            mode = 2;\r\n        } else if (target === 'input') {\r\n            mode = 1;\r\n        } else {\r\n            mode = 3;\r\n        }\r\n        refreshUI(this, mode, !forceRender);\r\n    }\r\n\r\n    /**\r\n     * Enter edit mode\r\n     * Not available on inline picker or when the picker element is hidden\r\n     */\r\n    enterEditMode() {\r\n        if (this.inline || !this.picker.active || this.editMode) {\r\n            return;\r\n        }\r\n        this.editMode = true;\r\n        this.inputField.classList.add('in-edit', 'border-primary-600');\r\n    }\r\n\r\n    /**\r\n     * Exit from edit mode\r\n     * Not available on inline picker\r\n     * @param  {Object} [options] - function options\r\n     * - update: {boolean} - whether to call update() after exiting\r\n     *     If false, input field is revert to the existing selection\r\n     *     default: false\r\n     */\r\n    exitEditMode(options = undefined) {\r\n        if (this.inline || !this.editMode) {\r\n            return;\r\n        }\r\n        const opts = Object.assign({ update: false }, options);\r\n        delete this.editMode;\r\n        this.inputField.classList.remove('in-edit', 'border-primary-600');\r\n        if (opts.update) {\r\n            this.update(opts);\r\n        }\r\n    }\r\n}\r\n\r\n// filter out the config options inapproprite to pass to Datepicker\r\nfunction filterOptions(options) {\r\n    const newOpts = Object.assign({}, options);\r\n\r\n    delete newOpts.inputs;\r\n    delete newOpts.allowOneSidedRange;\r\n    delete newOpts.maxNumberOfDates; // to ensure each datepicker handles a single date\r\n\r\n    return newOpts;\r\n}\r\n\r\nfunction setupDatepicker(rangepicker, changeDateListener, el, options) {\r\n    registerListeners(rangepicker, [\r\n        [el, 'changeDate', changeDateListener],\r\n    ]);\r\n    new Datepicker(el, options, rangepicker);\r\n}\r\n\r\nfunction onChangeDate(rangepicker, ev) {\r\n    // to prevent both datepickers trigger the other side's update each other\r\n    if (rangepicker._updating) {\r\n        return;\r\n    }\r\n    rangepicker._updating = true;\r\n\r\n    const target = ev.target;\r\n    if (target.datepicker === undefined) {\r\n        return;\r\n    }\r\n\r\n    const datepickers = rangepicker.datepickers;\r\n    const setDateOptions = { render: false };\r\n    const changedSide = rangepicker.inputs.indexOf(target);\r\n    const otherSide = changedSide === 0 ? 1 : 0;\r\n    const changedDate = datepickers[changedSide].dates[0];\r\n    const otherDate = datepickers[otherSide].dates[0];\r\n\r\n    if (changedDate !== undefined && otherDate !== undefined) {\r\n        // if the start of the range > the end, swap them\r\n        if (changedSide === 0 && changedDate > otherDate) {\r\n            datepickers[0].setDate(otherDate, setDateOptions);\r\n            datepickers[1].setDate(changedDate, setDateOptions);\r\n        } else if (changedSide === 1 && changedDate < otherDate) {\r\n            datepickers[0].setDate(changedDate, setDateOptions);\r\n            datepickers[1].setDate(otherDate, setDateOptions);\r\n        }\r\n    } else if (!rangepicker.allowOneSidedRange) {\r\n        // to prevent the range from becoming one-sided, copy changed side's\r\n        // selection (no matter if it's empty) to the other side\r\n        if (changedDate !== undefined || otherDate !== undefined) {\r\n            setDateOptions.clear = true;\r\n            datepickers[otherSide].setDate(datepickers[changedSide].dates, setDateOptions);\r\n        }\r\n    }\r\n    datepickers[0].picker.update().render();\r\n    datepickers[1].picker.update().render();\r\n    delete rangepicker._updating;\r\n}\r\n\r\n/**\r\n * Class representing a date range picker\r\n */\r\nclass DateRangePicker {\r\n    /**\r\n     * Create a date range picker\r\n     * @param  {Element} element - element to bind a date range picker\r\n     * @param  {Object} [options] - config options\r\n     */\r\n    constructor(element, options = {}) {\r\n        const inputs = Array.isArray(options.inputs)\r\n            ? options.inputs\r\n            : Array.from(element.querySelectorAll('input'));\r\n        if (inputs.length < 2) {\r\n            return;\r\n        }\r\n\r\n        element.rangepicker = this;\r\n        this.element = element;\r\n        this.inputs = inputs.slice(0, 2);\r\n        this.allowOneSidedRange = !!options.allowOneSidedRange;\r\n\r\n        const changeDateListener = onChangeDate.bind(null, this);\r\n        const cleanOptions = filterOptions(options);\r\n        // in order for initial date setup to work right when pcicLvel > 0,\r\n        // let Datepicker constructor add the instance to the rangepicker\r\n        const datepickers = [];\r\n        Object.defineProperty(this, 'datepickers', {\r\n            get() {\r\n                return datepickers;\r\n            },\r\n        });\r\n        setupDatepicker(this, changeDateListener, this.inputs[0], cleanOptions);\r\n        setupDatepicker(this, changeDateListener, this.inputs[1], cleanOptions);\r\n        Object.freeze(datepickers);\r\n        // normalize the range if inital dates are given\r\n        if (datepickers[0].dates.length > 0) {\r\n            onChangeDate(this, { target: this.inputs[0] });\r\n        } else if (datepickers[1].dates.length > 0) {\r\n            onChangeDate(this, { target: this.inputs[1] });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @type {Array} - selected date of the linked date pickers\r\n     */\r\n    get dates() {\r\n        return this.datepickers.length === 2\r\n            ? [\r\n                this.datepickers[0].dates[0],\r\n                this.datepickers[1].dates[0],\r\n            ]\r\n            : undefined;\r\n    }\r\n\r\n    /**\r\n     * Set new values to the config options\r\n     * @param {Object} options - config options to update\r\n     */\r\n    setOptions(options) {\r\n        this.allowOneSidedRange = !!options.allowOneSidedRange;\r\n\r\n        const cleanOptions = filterOptions(options);\r\n        this.datepickers[0].setOptions(cleanOptions);\r\n        this.datepickers[1].setOptions(cleanOptions);\r\n    }\r\n\r\n    /**\r\n     * Destroy the DateRangePicker instance\r\n     * @return {DateRangePicker} - the instance destroyed\r\n     */\r\n    destroy() {\r\n        this.datepickers[0].destroy();\r\n        this.datepickers[1].destroy();\r\n        unregisterListeners(this);\r\n        delete this.element.rangepicker;\r\n    }\r\n\r\n    /**\r\n     * Get the start and end dates of the date range\r\n     *\r\n     * The method returns Date objects by default. If format string is passed,\r\n     * it returns date strings formatted in given format.\r\n     * The result array always contains 2 items (start date/end date) and\r\n     * undefined is used for unselected side. (e.g. If none is selected,\r\n     * the result will be [undefined, undefined]. If only the end date is set\r\n     * when allowOneSidedRange config option is true, [undefined, endDate] will\r\n     * be returned.)\r\n     *\r\n     * @param  {String} [format] - Format string to stringify the dates\r\n     * @return {Array} - Start and end dates\r\n     */\r\n    getDates(format = undefined) {\r\n        const callback = format\r\n            ? date => formatDate(date, format, this.datepickers[0].config.locale)\r\n            : date => new Date(date);\r\n\r\n        return this.dates.map(date => date === undefined ? date : callback(date));\r\n    }\r\n\r\n    /**\r\n     * Set the start and end dates of the date range\r\n     *\r\n     * The method calls datepicker.setDate() internally using each of the\r\n     * arguments in start→end order.\r\n     *\r\n     * When a clear: true option object is passed instead of a date, the method\r\n     * clears the date.\r\n     *\r\n     * If an invalid date, the same date as the current one or an option object\r\n     * without clear: true is passed, the method considers that argument as an\r\n     * \"ineffective\" argument because calling datepicker.setDate() with those\r\n     * values makes no changes to the date selection.\r\n     *\r\n     * When the allowOneSidedRange config option is false, passing {clear: true}\r\n     * to clear the range works only when it is done to the last effective\r\n     * argument (in other words, passed to rangeEnd or to rangeStart along with\r\n     * ineffective rangeEnd). This is because when the date range is changed,\r\n     * it gets normalized based on the last change at the end of the changing\r\n     * process.\r\n     *\r\n     * @param {Date|Number|String|Object} rangeStart - Start date of the range\r\n     * or {clear: true} to clear the date\r\n     * @param {Date|Number|String|Object} rangeEnd - End date of the range\r\n     * or {clear: true} to clear the date\r\n     */\r\n    setDates(rangeStart, rangeEnd) {\r\n        const [datepicker0, datepicker1] = this.datepickers;\r\n        const origDates = this.dates;\r\n\r\n        // If range normalization runs on every change, we can't set a new range\r\n        // that starts after the end of the current range correctly because the\r\n        // normalization process swaps start↔︎end right after setting the new start\r\n        // date. To prevent this, the normalization process needs to run once after\r\n        // both of the new dates are set.\r\n        this._updating = true;\r\n        datepicker0.setDate(rangeStart);\r\n        datepicker1.setDate(rangeEnd);\r\n        delete this._updating;\r\n\r\n        if (datepicker1.dates[0] !== origDates[1]) {\r\n            onChangeDate(this, { target: this.inputs[1] });\r\n        } else if (datepicker0.dates[0] !== origDates[0]) {\r\n            onChangeDate(this, { target: this.inputs[0] });\r\n        }\r\n    }\r\n}\r\n\r\nwindow.Datepicker = Datepicker;\r\nwindow.DateRangePicker = DateRangePicker;\r\n\r\n\n\n//# sourceURL=webpack://elstar/./src/es/core/components/DatePicker/Pickers.js?");

/***/ }),

/***/ "./src/es/core/components/DatePicker/events.js":
/*!*****************************************************!*\
  !*** ./src/es/core/components/DatePicker/events.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Events {\r\n    _eventType;\r\n    _eventFunctions;\r\n\r\n    constructor(eventType, eventFunctions = []) {\r\n        this._eventType = eventType;\r\n        this._eventFunctions = eventFunctions;\r\n    }\r\n\r\n    init() {\r\n        this._eventFunctions.forEach((eventFunction) => {\r\n            if (typeof window !== 'undefined') {\r\n                window.addEventListener(this._eventType, eventFunction);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Events);\n\n//# sourceURL=webpack://elstar/./src/es/core/components/DatePicker/events.js?");

/***/ }),

/***/ "./src/es/core/components/DatePicker/index.js":
/*!****************************************************!*\
  !*** ./src/es/core/components/DatePicker/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DatePicker)\n/* harmony export */ });\n/* harmony import */ var _Pickers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Pickers */ \"./src/es/core/components/DatePicker/Pickers.js\");\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events */ \"./src/es/core/components/DatePicker/events.js\");\n\r\n\r\n\r\nfunction DatePicker () {\r\n    const getDatepickerOptions = (datepickerEl) => {\r\n        const buttons = datepickerEl.hasAttribute('datepicker-buttons');\r\n        const autohide = datepickerEl.hasAttribute('datepicker-autohide');\r\n        const format = datepickerEl.hasAttribute('datepicker-format');\r\n        const orientation = datepickerEl.hasAttribute('datepicker-orientation');\r\n        const title = datepickerEl.hasAttribute('datepicker-title');\r\n    \r\n        const options = {};\r\n        if (buttons) {\r\n            options.todayBtn = true;\r\n            options.clearBtn = true;\r\n        }\r\n        if (autohide) {\r\n            options.autohide = true;\r\n        }\r\n        if (format) {\r\n            options.format = datepickerEl.getAttribute('datepicker-format');\r\n        }\r\n        if (orientation) {\r\n            options.orientation = datepickerEl.getAttribute(\r\n                'datepicker-orientation'\r\n            );\r\n        }\r\n        if (title) {\r\n            options.title = datepickerEl.getAttribute('datepicker-title');\r\n        }\r\n    \r\n        return options;\r\n    };\r\n    \r\n    function initDatepickers() {\r\n\r\n        document.querySelectorAll('[datepicker]').forEach(function (datepickerEl) {\r\n            new _Pickers__WEBPACK_IMPORTED_MODULE_0__.Datepicker(datepickerEl, getDatepickerOptions(datepickerEl));\r\n        });\r\n    \r\n        document\r\n            .querySelectorAll('[inline-datepicker]')\r\n            .forEach(function (datepickerEl) {\r\n                new _Pickers__WEBPACK_IMPORTED_MODULE_0__.Datepicker(datepickerEl, getDatepickerOptions(datepickerEl));\r\n            });\r\n    \r\n        document\r\n            .querySelectorAll('[date-rangepicker]')\r\n            .forEach(function (datepickerEl) {\r\n                new _Pickers__WEBPACK_IMPORTED_MODULE_0__.DateRangePicker(\r\n                    datepickerEl,\r\n                    getDatepickerOptions(datepickerEl)\r\n                );\r\n            });\r\n    }\r\n    \r\n    const events = new _events__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('DOMContentLoaded', [initDatepickers]);\r\n    events.init();\r\n    initDatepickers()\r\n}\n\n//# sourceURL=webpack://elstar/./src/es/core/components/DatePicker/index.js?");

/***/ }),

/***/ "./src/es/core/components/Popover.js":
/*!*******************************************!*\
  !*** ./src/es/core/components/Popover.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Popover)\n/* harmony export */ });\nfunction Popover () {\r\n    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'))\r\n    popoverTriggerList.map(function (popoverTriggerEl) {\r\n        return new bootstrap.Popover(popoverTriggerEl)\r\n    })\r\n}\n\n//# sourceURL=webpack://elstar/./src/es/core/components/Popover.js?");

/***/ }),

/***/ "./src/es/core/components/Toast.js":
/*!*****************************************!*\
  !*** ./src/es/core/components/Toast.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Toast)\n/* harmony export */ });\nfunction Toast() {\r\n    $('.toast').toast();\r\n}\n\n//# sourceURL=webpack://elstar/./src/es/core/components/Toast.js?");

/***/ }),

/***/ "./src/es/core/components/Tooltip.js":
/*!*******************************************!*\
  !*** ./src/es/core/components/Tooltip.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Tooltip)\n/* harmony export */ });\nfunction Tooltip () {\r\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\r\n    tooltipTriggerList.map(function (tooltipTriggerEl) {\r\n        return new bootstrap.Tooltip(tooltipTriggerEl)\r\n    })\r\n}\n\n//# sourceURL=webpack://elstar/./src/es/core/components/Tooltip.js?");

/***/ }),

/***/ "./src/es/core/components/index.js":
/*!*****************************************!*\
  !*** ./src/es/core/components/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Components)\n/* harmony export */ });\n/* harmony import */ var _Affix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Affix */ \"./src/es/core/components/Affix.js\");\n/* harmony import */ var _Avatar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Avatar */ \"./src/es/core/components/Avatar.js\");\n/* harmony import */ var _Alert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Alert */ \"./src/es/core/components/Alert.js\");\n/* harmony import */ var _DatePicker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DatePicker */ \"./src/es/core/components/DatePicker/index.js\");\n/* harmony import */ var _Tooltip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Tooltip */ \"./src/es/core/components/Tooltip.js\");\n/* harmony import */ var _Popover__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Popover */ \"./src/es/core/components/Popover.js\");\n/* harmony import */ var _Toast__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Toast */ \"./src/es/core/components/Toast.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Components {\r\n\r\n    constructor() {\r\n\t\tthis.initComponents()\r\n\t}\r\n\r\n    initComponents () {\r\n        (0,_Affix__WEBPACK_IMPORTED_MODULE_0__[\"default\"])()\r\n        ;(0,_Avatar__WEBPACK_IMPORTED_MODULE_1__[\"default\"])()\r\n        ;(0,_Alert__WEBPACK_IMPORTED_MODULE_2__[\"default\"])()\r\n        ;(0,_DatePicker__WEBPACK_IMPORTED_MODULE_3__[\"default\"])()\r\n        ;(0,_Tooltip__WEBPACK_IMPORTED_MODULE_4__[\"default\"])()\r\n        ;(0,_Popover__WEBPACK_IMPORTED_MODULE_5__[\"default\"])()\r\n        ;(0,_Toast__WEBPACK_IMPORTED_MODULE_6__[\"default\"])()\r\n    }\r\n}\n\n//# sourceURL=webpack://elstar/./src/es/core/components/index.js?");

/***/ }),

/***/ "./src/es/core/index.js":
/*!******************************!*\
  !*** ./src/es/core/index.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Core)\n/* harmony export */ });\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components */ \"./src/es/core/components/index.js\");\n/* harmony import */ var _utils_hasElement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/hasElement */ \"./src/es/utils/hasElement.js\");\n\r\n\r\n\r\nlet sideNavScrollbar\r\n\r\nconst setStackedNavItemActive = (id) => {\r\n\r\n\tconst resetStackedNavMenu = () => {\r\n\t\t$('[data-stacked-side-nav]').removeClass('block')\r\n\t\t$('[data-stacked-side-nav]').addClass('hidden')\r\n\t}\r\n\r\n\t$('.stacked-side-nav-menu-item').removeClass('menu-item-active')\r\n\t$(`#${id}`).addClass('menu-item-active')\r\n\r\n\tresetStackedNavMenu()\r\n\t$(`[data-stacked-side-nav=\"${id}\"]`).removeClass('hidden')\r\n\t$(`[data-stacked-side-nav=\"${id}\"]`).addClass('block')\r\n}\r\n\r\nclass Core extends _components__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n\r\n    constructor() {\r\n\t\tsuper()\r\n\t\tthis.sideNavToggle();\r\n\t\tthis.menuToggle();\r\n\t\tthis.initSideNavScrollbar();\r\n\t\tthis.initNotificationScrollbar()\r\n\t\tthis.initMenuActive()\r\n\t}\r\n\t\r\n    sideNavToggle() {\r\n\t\tconst sideNav = $('.side-nav')\r\n\t\tlet self = this\r\n\t\t$('#side-nav-toggle').on('click', function () {\r\n\t\t\t\r\n            $('.side-nav-toggle-icon-expand, .side-nav-toggle-icon-collapsed').toggleClass('hidden');\r\n\t\t\tconst setLogo = () => {\r\n\t\t\t\tconst logo = $(`.side-nav .logo`)\r\n\t\t\t\tconst logoImg = $(`.side-nav .logo img`)\r\n\t\t\t\tconst isDarkMode = $('html').hasClass('dark')\r\n\t\t\t\tconst isCollapse = sideNav.hasClass('side-nav-collapsed')\r\n\t\t\t\tconst isThemedSideNav = sideNav.hasClass('side-nav-themed')\r\n\t\t\t\tconst logoType = isCollapse ? 'streamline' : 'full'\r\n\t\t\t\tconst logoMode = isDarkMode || isThemedSideNav ? 'dark' : 'light'\r\n\r\n\t\t\t\tif(sideNav.hasClass('side-nav-collapsed')) {\r\n\t\t\t\t\tlogo.removeClass('px-6')\r\n\t\t\t\t\tlogo.addClass('px-4')\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlogo.removeClass('px-4')\r\n\t\t\t\t\tlogo.addClass('px-6')\r\n\t\t\t\t}\r\n\t\t\t\tlogoImg.attr('src', `img/logo/logo-${logoMode}-${logoType}.png`);\r\n\t\t\t}\r\n\t\t\tif (sideNav.hasClass('side-nav-expand')) {\r\n\t\t\t\tsideNav.removeClass('side-nav-expand')\r\n\t\t\t\tsideNav.addClass('side-nav-collapsed')\r\n\t\t\t\t$('.side-nav .menu-collapse > ul').removeAttr('style')\r\n\t\t\t\tsetLogo()\r\n\t\t\t} else if (sideNav.hasClass('side-nav-collapsed')) {\r\n\t\t\t\tsideNav.addClass('side-nav-expand')\r\n\t\t\t\tsideNav.removeClass('side-nav-collapsed')\r\n\t\t\t\tsetLogo()\r\n\t\t\t}\r\n\r\n\t\t\tif ($('.side-nav').hasClass('side-nav-collapsed')) {\r\n\t\t\t\tsideNavScrollbar.destroy()\r\n\t\t\t}\r\n\r\n\t\t\tif ($('.side-nav').hasClass('side-nav-expand')) {\r\n\t\t\t\tself.initSideNavScrollbar()\r\n\t\t\t}\r\n        });\r\n\t}\r\n\r\n\tmenuToggle() {\r\n\r\n\t\tfunction handleMenuToggle (self) {\r\n\t\t\t$(self).parent('.menu-collapse').toggleClass('menu-collapse-item-active')\r\n\t\t\t$(self).parent('.menu-collapse').find('ul').slideToggle(100);\r\n\t\t}\r\n\r\n\t\t$('.side-nav-expand .menu-collapse > .menu-collapse-item').on('click', function() {\r\n\t\t\tif ($('.side-nav').hasClass('side-nav-expand')) {\r\n\t\t\t\thandleMenuToggle(this)\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$('.side-nav-mobile .menu-collapse > .menu-collapse-item').on('click', function() {\r\n\t\t\thandleMenuToggle(this)\r\n\t\t})\r\n\r\n\t\tif ((0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('.stacked-side-nav')) {\r\n\r\n\t\t\t$('.stacked-side-nav-menu-item').on('click', function() {\r\n\t\t\t\tsetStackedNavItemActive(this.id)\r\n\r\n\t\t\t\tif ((0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(`[data-stacked-side-nav=\"${this.id}\"]`)) {\r\n\t\t\t\t\t$('.stacked-side-nav-secondary').removeClass('stacked-side-nav-collapsed')\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\t$('.stacked-side-nav-content .menu-collapse > .menu-collapse-item').on('click', function() {\r\n\t\t\t\thandleMenuToggle(this)\r\n\t\t\t})\r\n\r\n\t\t\t$('.stacked-side-nav-collapse-button').on('click', function() {\r\n\t\t\t\t$('.stacked-side-nav-secondary').addClass('stacked-side-nav-collapsed')\r\n\t\t\t\t$('.stacked-side-nav-menu-item').removeClass('menu-item-active')\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tinitMenuActive() {\r\n\r\n\t\tfunction handleMenuActive (menuItem) {\r\n\t\t\tmenuItem.addClass('menu-item-active')\r\n\t\t\tif (menuItem.parent().parent('.menu-collapse').hasClass('menu-collapse')) {\r\n\t\t\t\tmenuItem.parent().parent('.menu-collapse').toggleClass('menu-collapse-item-active')\r\n\t\t\t\tmenuItem.parent().slideToggle(100);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst urlPath = location.pathname.split('/')\r\n\t\tconst currentPath = urlPath[urlPath.length - 1].split('.')[0]\r\n\t\tconst navMenuItem = [\r\n\t\t\t$(`.stacked-side-nav-content [data-menu-item=\"${currentPath}\"]`),\r\n\t\t\t$(`.side-nav-expand [data-menu-item=\"${currentPath}\"]`),\r\n\t\t\t$(`.side-nav-mobile [data-menu-item=\"${currentPath}\"]`)\r\n\t\t]\r\n\r\n\t\tfor (let i = 0; i < navMenuItem.length; i++) {\r\n\t\t\thandleMenuActive(navMenuItem[i])\r\n\t\t}\r\n\r\n\t\tif ((0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('.stacked-side-nav')) {\r\n\t\t\t\r\n\t\t\t$('[data-stacked-side-nav]').each(function() {\r\n\t\t\t\tconst viewAttribute = $(this).data('stacked-side-nav')\r\n\r\n\t\t\t\tif ($(this).find('.menu-item.menu-item-active').length === 1) {\r\n\t\t\t\t\tsetStackedNavItemActive(viewAttribute)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tinitSideNavScrollbar() {\r\n\t\tif((0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('.side-nav') || (0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('.stacked-side-nav')) {\r\n\t\t\tsideNavScrollbar = new PerfectScrollbar('.side-nav-scroll');\r\n\t\t}\r\n\t}\r\n\r\n\tinitNotificationScrollbar() {\r\n\t\tif((0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('.notification-scroll')) {\r\n\t\t\tnew PerfectScrollbar('.notification-scroll');\r\n\t\t}\r\n\t}\r\n}    \n\n//# sourceURL=webpack://elstar/./src/es/core/index.js?");

/***/ }),

/***/ "./src/es/docs/index.js":
/*!******************************!*\
  !*** ./src/es/docs/index.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_copyToClipboard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/copyToClipboard */ \"./src/es/utils/copyToClipboard.js\");\n\r\n\r\nfunction docInit () {\r\n\r\n    $('.button-show-code').on('click', function() {\r\n        $(this).parent().parent().parent('.demo-action-bar').siblings('.demo-code-snippet').toggleClass('hidden')\r\n    });\r\n\r\n\r\n    $('.button-copy').on('click', function() {\r\n        const codeContainers = $(this).parent().parent().parent('.demo-action-bar').siblings('.demo-code-snippet');\r\n        let codeText = \"\";\r\n        const codeToastWrapperId = '#code-copy-toast-wrapper'\r\n        codeContainers.each(function(index, element) {\r\n            const codeElement = $(element).find('code');\r\n            codeText += codeElement.text().trim() + \"\\n\";\r\n        });\r\n\r\n        if (codeText.length > 0) {\r\n            (0,_utils_copyToClipboard__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(codeText);\r\n            if ($(`${codeToastWrapperId}`).length == 0) {\r\n                $('body').append('<div id=\"code-copy-toast-wrapper\" class=\"toast-wrapper top-center\"></div>');\r\n            }\r\n\r\n            const toastHTML = `<div class=\"toast fade\">\r\n                <div class=\"notification\">\r\n                    <div class=\"notification-content\">\r\n                        <div class=\"mr-3\">\r\n                            <span class=\"text-2xl text-emerald-400\">\r\n                                <svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 20 20\" aria-hidden=\"true\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\"></path>\r\n                                </svg>\r\n                            </span>\r\n                        </div>\r\n                        <div class=\"mr-4\">\r\n                            <div class=\"notification-title\">Copied</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>`\r\n            $(`${codeToastWrapperId}`).append(toastHTML)\r\n            $(`${codeToastWrapperId} .toast:last-child`).toast('show');\r\n            setTimeout(function(){ \r\n                $(`${codeToastWrapperId} .toast:first-child`).remove();\r\n            }, 2000);\r\n        }\r\n    });\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ docInit });\n\n//# sourceURL=webpack://elstar/./src/es/docs/index.js?");

/***/ }),

/***/ "./src/es/theme-configurator/index.js":
/*!********************************************!*\
  !*** ./src/es/theme-configurator/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _constant_theme_constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constant/theme-constant */ \"./src/es/constant/theme-constant.js\");\n/* harmony import */ var _utils_chainRemoveClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/chainRemoveClass */ \"./src/es/utils/chainRemoveClass.js\");\n/* harmony import */ var _utils_hasElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/hasElement */ \"./src/es/utils/hasElement.js\");\n\r\n\r\n\r\n\r\nconst menuModeList = ['menu-transparent', 'menu-light', 'menu-dark', 'menu-themed']\r\nconst sideNavModeList = ['side-nav-transparent', 'side-nav-light', 'side-nav-dark', 'side-nav-themed']\r\nconst stackedSideNavMiniModeList = ['stacked-side-nav-mini-light', 'stacked-side-nav-mini-dark', 'stacked-side-nav-mini-themed']\r\nconst secondaryNavModeList = ['secondary-header-transparent', 'secondary-header-light', 'secondary-header-dark', 'secondary-header-themed']\r\n\r\n\r\nfunction themeConfigurator() {\r\n    let direction = 'ltr'\r\n    const sideNav = $('.side-nav')\r\n    const sideNavMenu = $('.side-nav .side-nav-content .menu')\r\n    const secondaryHeader = $('.secondary-header')\r\n    const stackedSideNav = $('.stacked-side-nav')\r\n    const stackedSideNavMini = $('.stacked-side-nav-mini')\r\n\r\n    const setLogo = () => {\r\n        const logo = $(`.logo`)\r\n        const logoImg = $(`.logo img`)\r\n        const isDarkMode = $('html').hasClass('dark')\r\n        const isCollapse = sideNav.hasClass('side-nav-collapsed')\r\n        const isThemedSideNav = sideNav.hasClass('side-nav-themed') || stackedSideNavMini.hasClass('stacked-side-nav-mini-themed')\r\n        const logoType = function () {\r\n\r\n            if (isCollapse || (0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_2__[\"default\"])('.stacked-side-nav')) {\r\n                return 'streamline'\r\n            }\r\n\r\n            return 'full'\r\n        }()\r\n        const logoMode = isDarkMode || isThemedSideNav ? 'dark' : 'light'\r\n\r\n        if(isCollapse || (0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_2__[\"default\"])('.stacked-side-nav')) {\r\n            logo.removeClass('px-6')\r\n            logo.addClass('px-4')\r\n            \r\n        } else {\r\n            logo.removeClass('px-4')\r\n            logo.addClass('px-6')\r\n        }\r\n\r\n        logoImg.attr('src', `img/logo/logo-${logoMode}-${logoType}.png`);\r\n    }\r\n\r\n    const resetSideNavMode = () => {\r\n        ;(0,_utils_chainRemoveClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('.side-nav', sideNavModeList)\r\n        ;(0,_utils_chainRemoveClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('.side-nav .side-nav-content .menu', menuModeList)\r\n    }\r\n\r\n    const resetSecondaryNavMode = () => {\r\n        ;(0,_utils_chainRemoveClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('.secondary-header', secondaryNavModeList)\r\n    }\r\n\r\n    const resetStackedSideNavMini = () => {\r\n        ;(0,_utils_chainRemoveClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('.stacked-side-nav-mini', stackedSideNavMiniModeList)\r\n        ;(0,_utils_chainRemoveClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('.stacked-side-nav-mini .menu', menuModeList)\r\n    }\r\n\r\n    const setDefaultNavMode = () => {\r\n        const urlPath = location.pathname.split('/')\r\n        const currentPath = urlPath[urlPath.length - 1].split('.')[0]\r\n\r\n        const setSideNavMode = (mode) => {\r\n            sideNav.addClass(`side-nav-${mode}`);\r\n            sideNavMenu.addClass(`menu-${mode}`);\r\n        }\r\n\r\n        const setStackedSideNavMode = (mode) => {\r\n            stackedSideNavMini.addClass(`stacked-side-nav-mini-${mode}`)\r\n            $('.stacked-side-nav-mini .menu').addClass(`menu-${mode}`)\r\n        }\r\n\r\n        if (currentPath.includes('modern')) {\r\n            resetSideNavMode()\r\n            setSideNavMode('transparent')\r\n\r\n        }\r\n\r\n        if (currentPath.includes('classic') || currentPath.includes('stackedSide')) {\r\n            resetSideNavMode()\r\n\r\n            if ($('html').hasClass('dark')) {\r\n                setSideNavMode('dark')\r\n            }\r\n\r\n            if ($('html').hasClass('light')) {\r\n                setSideNavMode('light')\r\n            }\r\n        }\r\n\r\n        if ((0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(secondaryHeader)) {\r\n            resetSecondaryNavMode()\r\n\r\n            if ($('html').hasClass('dark')) {\r\n                secondaryHeader.addClass('secondary-header-dark')\r\n            }\r\n\r\n            if ($('html').hasClass('light')) {\r\n                secondaryHeader.addClass('secondary-header-light')\r\n            }\r\n        }\r\n\r\n        if ((0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(stackedSideNav)) {\r\n            resetStackedSideNavMini()\r\n\r\n            if ($('html').hasClass('dark')) {\r\n                setStackedSideNavMode('dark')\r\n            }\r\n\r\n            if ($('html').hasClass('light')) {\r\n                setStackedSideNavMode('light')\r\n            }\r\n        }\r\n    }\r\n\r\n    $(document).on('change', 'input[name=\"dark-mode-toggle\"]', (e)=>{\r\n\r\n        const mode = e.target.checked ? 'dark' : 'light'\r\n        const oppositeMode = function () {\r\n            if (mode === 'light') {\r\n                return 'dark'\r\n            }\r\n\r\n            if (mode === 'dark') {\r\n                return 'light'\r\n            }\r\n        }()\r\n\r\n        $('html').removeClass(oppositeMode);\r\n        $('html').addClass(mode);\r\n\r\n        \r\n        if ((0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(sideNav) && sideNav.hasClass(`side-nav-${oppositeMode}`)) {\r\n            setDefaultNavMode()\r\n        }\r\n\r\n        if ((0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(secondaryHeader)) {\r\n            resetSecondaryNavMode()\r\n            secondaryHeader.addClass(`secondary-header-${mode}`)\r\n        }\r\n\r\n        if ((0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(stackedSideNav)) {\r\n            (0,_utils_chainRemoveClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('.stacked-side-nav-content', menuModeList)\r\n            $('.stacked-side-nav-content').addClass(`menu-${mode}`)\r\n\r\n            if (!$('.stacked-side-nav-mini').hasClass('stacked-side-nav-mini-themed')) {\r\n                resetStackedSideNavMini()\r\n                $('.stacked-side-nav-mini .menu').addClass(`menu-${mode}`)\r\n                $('.stacked-side-nav-mini').addClass(`stacked-side-nav-mini-${mode}`)\r\n            }\r\n        }\r\n\r\n        setLogo()\r\n    });\r\n\r\n    $(\"#dir-ltr-button\").on(\"click\", function() {\r\n        \r\n        if (direction !== \"ltr\") {\r\n            direction = \"ltr\";\r\n            $(\"html\").attr(\"dir\", \"ltr\");\r\n            $('#dir-ltr-button').removeClass('bg-white dark:bg-gray-700');\r\n            $('#dir-rtl-button').removeClass('bg-gray-100 dark:bg-gray-500');\r\n            $('#dir-ltr-button').addClass('bg-gray-100 dark:bg-gray-500');\r\n\r\n        }\r\n    });\r\n\r\n    $(\"#dir-rtl-button\").on(\"click\", function() {\r\n        if (direction !== \"rtl\") {\r\n            direction = \"rtl\";\r\n            $(\"html\").attr(\"dir\", \"rtl\");\r\n            $('#dir-rtl-button').removeClass('bg-white dark:bg-gray-700');\r\n            $('#dir-ltr-button').removeClass('bg-gray-100 dark:bg-gray-500');\r\n            $('#dir-rtl-button').addClass('bg-gray-100 dark:bg-gray-500');\r\n        }\r\n    });\r\n\r\n    $('#theme-select').on('change', (e)=> {\r\n        const color = e.target.value\r\n        let primary = _constant_theme_constant__WEBPACK_IMPORTED_MODULE_0__.themeColors[color]\r\n\r\n        if (color === 'primary') {\r\n            primary = _constant_theme_constant__WEBPACK_IMPORTED_MODULE_0__.themeColors['indigo']\r\n        }\r\n\r\n        const root = document.querySelector(':root')\r\n        const colorLevel = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950]\r\n        colorLevel.forEach((level) => {\r\n            root.style.setProperty(`--primary-color-${level}`, primary[`${level}`]);\r\n        })\r\n    });\r\n    \r\n    const handleLayoutClick = (layout) => {\r\n        const pathArr = window.location.pathname.split('/')\r\n        const lastPath = pathArr[pathArr.length - 1]\r\n        const splitedPath = lastPath.split('-')\r\n        splitedPath[0] = layout\r\n        location.href = splitedPath.join('-')\r\n    }\r\n\r\n    $('#layout-classic').on('click', ()=> {\r\n        handleLayoutClick('classic')\r\n    });\r\n\r\n    $('#layout-modern').on('click', ()=> {\r\n        handleLayoutClick('modern')\r\n    });\r\n    \r\n    $('#layout-stackedSide').on('click', ()=> {\r\n        handleLayoutClick('stackedSide')\r\n    });\r\n    \r\n    $('#layout-simple').on('click', ()=> {\r\n        handleLayoutClick('simple')\r\n    });\r\n\r\n    $('#layout-decked').on('click', ()=> {\r\n        handleLayoutClick('decked')\r\n    });\r\n\r\n    $('input[name=\"nav-mode-radio-group\"]').on('change', function() {\r\n        const selectedValue = $(this).val();\r\n        \r\n        if (selectedValue === 'themed') {\r\n\r\n            if ((0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(sideNav)) {\r\n                resetSideNavMode()\r\n\r\n                sideNav.addClass('side-nav-themed');\r\n                sideNavMenu.addClass('menu-themed');\r\n            }\r\n\r\n            if ((0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(secondaryHeader)) {\r\n                resetSecondaryNavMode()\r\n                secondaryHeader.addClass('secondary-header-themed')\r\n            }\r\n\r\n            if ((0,_utils_hasElement__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(stackedSideNav)) {\r\n                resetStackedSideNavMini()\r\n                $('.stacked-side-nav-mini .menu').addClass('menu-themed')\r\n                $('.stacked-side-nav-mini').addClass('stacked-side-nav-mini-themed')\r\n            }\r\n        }\r\n\r\n        if (selectedValue === 'default') {\r\n            setDefaultNavMode()\r\n        }\r\n\r\n        setLogo()\r\n    });\r\n\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ themeConfigurator });\n\n//# sourceURL=webpack://elstar/./src/es/theme-configurator/index.js?");

/***/ }),

/***/ "./src/es/utils/chainRemoveClass.js":
/*!******************************************!*\
  !*** ./src/es/utils/chainRemoveClass.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector, classes = []) {\r\n\r\n    classes.forEach((cls) => {\r\n        $(selector).removeClass(cls)\r\n    })\r\n}\n\n//# sourceURL=webpack://elstar/./src/es/utils/chainRemoveClass.js?");

/***/ }),

/***/ "./src/es/utils/copyToClipboard.js":
/*!*****************************************!*\
  !*** ./src/es/utils/copyToClipboard.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(text) {\r\n    const textArea = $('<textarea/>');\r\n    textArea.val(text);\r\n    $('body').append(textArea);\r\n    textArea.select();\r\n    document.execCommand('copy');\r\n    textArea.remove();\r\n}\n\n//# sourceURL=webpack://elstar/./src/es/utils/copyToClipboard.js?");

/***/ }),

/***/ "./src/es/utils/hasElement.js":
/*!************************************!*\
  !*** ./src/es/utils/hasElement.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(selector) {\r\n    return $(selector).length > 0\r\n}\n\n//# sourceURL=webpack://elstar/./src/es/utils/hasElement.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/es/app.js");
/******/ 	
/******/ })()
;